/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.9.0. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module Blink_topEntity_recordProcessorC
    ( // Inputs
      input wire  c$ds1_bindCsr // clock
    , input wire  c$ds1_bindCsr_0 // reset
    , input wire [71:0] eta

      // Outputs
    , output wire [142:0] result
    );
  reg [42:0] c$ds1_app_arg = {3'b000,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
  wire  bwd1;
  wire  b;
  wire [71:0] result_0;
  wire [70:0] s2rAc;
  wire  r2sAc;
  wire [185:0] result_1;
  reg [74:0] result_2;
  wire [0:0] c$case_alt;
  wire [3:0] sel;
  wire  c$case_alt_0;
  wire [0:0] c$case_alt_1;
  reg [32:0] c$app_arg;
  reg [32:0] c$case_alt_2;
  reg  c$app_arg_0;
  reg [42:0] c$app_arg_1;
  wire [42:0] c$case_alt_3;
  wire [42:0] \c$state'_case_alt ;
  reg [42:0] \c$state'_case_alt_0 ;
  wire [42:0] result_3;
  wire [7:0] \rCount' ;
  wire [42:0] result_4;
  wire [7:0] \wCount' ;
  wire [42:0] \c$state'_case_alt_1 ;
  wire [31:0] \c$state'_case_alt_2 ;
  wire [42:0] \c$state'_case_alt_3 ;
  wire [42:0] \c$state'_case_alt_4 ;
  wire [31:0] \c$state'_app_arg ;
  wire [31:0] psWord;
  wire  \c$state'_case_scrut ;
  wire [31:0] y;
  wire [31:0] c$psWord_case_alt;
  wire [32:0] x;
  wire [185:0] c$case_alt_4;
  reg [185:0] result_5;
  wire [185:0] c$case_alt_5;
  wire [69:0] ipv;
  wire [7:0] c$bv;
  wire [3:0] c$case_alt_selection_3;
  wire [3:0] \c$state'_case_alt_selection_1 ;
  wire [31:0] c$vec;
  wire [70:0] c$case_alt_selection_13;

  // register begin
  always @(posedge c$ds1_bindCsr or  negedge  c$ds1_bindCsr_0) begin : c$ds1_app_arg_register
    if ( ! c$ds1_bindCsr_0) begin
      c$ds1_app_arg <= {3'b000,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    end else begin
      c$ds1_app_arg <= c$case_alt_5[185:143];
    end
  end
  // register end

  assign bwd1 = c$case_alt_5[142:142];

  assign b = ~ (c$ds1_bindCsr_0);

  assign result_0 = b ? {1'b0,
                         {1'b0,70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {bwd1,
                                                                                                               s2rAc};

  assign result = {result_0[71:71],
                   c$case_alt_5[141:0]};

  assign s2rAc = eta[71:1];

  assign r2sAc = eta[0:0];

  assign result_1 = {c$app_arg_1,   {c$app_arg_0,
                                     {{1'b1,{y,   c$app_arg,   ipv[0:0]}},
                                      result_2}}};

  always @(*) begin
    case(c$ds1_app_arg[42:40])
      3'b001 : result_2 = {1'b1,{c$ds1_app_arg[31:0],
                                 {1'b1,psWord},   sel,
                                 x[32:32] | (((c$ds1_app_arg[39:32] + y[7:0]) == 8'd1) & y[27:27]),
                                 c$case_alt_1,   c$case_alt_0,   x[32:32],
                                 ipv[0:0]}};
      3'b011 : result_2 = {1'b1,{\c$state'_app_arg ,
                                 {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                                 sel,
                                 x[32:32] | ((c$ds1_app_arg[39:32] == 8'd1) & y[27:27]),
                                 c$case_alt,   c$case_alt_0,   x[32:32],
                                 ipv[0:0]}};
      default : result_2 = {1'b0,74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    endcase
  end

  assign c$case_alt = y[30:30] ? 1'd1 : 1'd0;

  assign c$bv = y[23:16];

  assign sel = c$bv[0+:4];

  assign c$case_alt_selection_3 = ipv[37:34];

  assign c$case_alt_0 = c$case_alt_selection_3[3:3] ? 1'b1 : 1'b0;

  assign c$case_alt_1 = y[26:26] ? 1'd1 : 1'd0;

  always @(*) begin
    case(c$ds1_app_arg[42:40])
      3'b000 : c$app_arg = c$case_alt_2;
      3'b010 : c$app_arg = {1'b1,\c$state'_app_arg };
      default : c$app_arg = {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    endcase
  end

  always @(*) begin
    case(\c$state'_case_alt [42:40])
      3'b011 : c$case_alt_2 = {1'b1,\c$state'_app_arg };
      default : c$case_alt_2 = {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    endcase
  end

  always @(*) begin
    case(c$ds1_app_arg[42:40])
      3'b000 : c$app_arg_0 = 1'b1;
      3'b010 : c$app_arg_0 = 1'b1;
      default : c$app_arg_0 = r2sAc;
    endcase
  end

  always @(*) begin
    case(c$ds1_app_arg[42:40])
      3'b000 : c$app_arg_1 = \c$state'_case_alt ;
      3'b010 : c$app_arg_1 = \c$state'_case_alt ;
      default : c$app_arg_1 = c$case_alt_3;
    endcase
  end

  assign c$case_alt_3 = r2sAc ? \c$state'_case_alt  : c$ds1_app_arg;

  assign \c$state'_case_alt_selection_1  = ipv[37:34];

  assign \c$state'_case_alt  = \c$state'_case_alt_selection_1 [3:3] ? {3'b000,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : \c$state'_case_alt_0 ;

  always @(*) begin
    case(c$ds1_app_arg[42:40])
      3'b000 : \c$state'_case_alt_0  = \c$state'_case_alt_3 ;
      3'b001 : \c$state'_case_alt_0  = result_4;
      3'b010 : \c$state'_case_alt_0  = {3'b011,y[7:0],32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
      3'b011 : \c$state'_case_alt_0  = result_3;
      default : \c$state'_case_alt_0  = {3'b100,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    endcase
  end

  assign result_3 = (\rCount'  == 8'd0) ? {3'b100,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {3'b011,\rCount' ,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign \rCount'  = c$ds1_app_arg[39:32] - 8'd1;

  assign result_4 = (\wCount'  == 8'd0) ? \c$state'_case_alt_1  : {3'b001,\wCount' ,\c$state'_case_alt_2 };

  assign \wCount'  = c$ds1_app_arg[39:32] - 8'd1;

  assign \c$state'_case_alt_1  = \c$state'_case_scrut  ? {3'b010,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {3'b100,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign \c$state'_case_alt_2  = y[25:25] ? c$ds1_app_arg[31:0] : (c$ds1_app_arg[31:0] + 32'b00000000000000000000000000000100);

  assign \c$state'_case_alt_3  = (y[15:8] > 8'd0) ? {3'b001,y[15:8],\c$state'_app_arg } : \c$state'_case_alt_4 ;

  assign \c$state'_case_alt_4  = \c$state'_case_scrut  ? {3'b011,y[7:0],32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {3'b000,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign \c$state'_app_arg  = psWord;

  assign psWord = (c$psWord_case_alt);

  assign \c$state'_case_scrut  = y[7:0] > 8'd0;

  assign y = x[31:0];

  assign c$vec = ipv[69:38];

  // map begin
  genvar i;
  generate
  for (i=0; i < 4; i = i + 1) begin : map
    wire [7:0] map_in;
    assign map_in = c$vec[i*8+:8];
    wire [7:0] map_out;
    assign map_out = map_in;


    assign c$psWord_case_alt[i*8+:8] = map_out;
  end
  endgenerate
  // map end

  assign x = ipv[33:1];

  assign c$case_alt_4 = ipv[0:0] ? {{3'b000,40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                                    {1'b1,
                                     {{1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                                      {1'b0,74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}}} : result_1;

  always @(*) begin
    case(c$ds1_app_arg[42:40])
      3'b000 : result_5 = c$case_alt_4;
      default : result_5 = result_1;
    endcase
  end

  assign c$case_alt_selection_13 = result_0[70:0];

  assign c$case_alt_5 = c$case_alt_selection_13[70:70] ? result_5 : {c$ds1_app_arg,
                                                                     {1'b1,
                                                                      {{1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                                                                       {1'b0,74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}}};

  assign ipv = result_0[69:0];


endmodule

