/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.9.0. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire  CLK // clock
    , input wire  BTN // reset
    , input wire  PMOD3_7
    , input wire  PMOD3_6
    , input wire  PMOD3_5
    , input wire  PMOD3_4
    , input wire  PMOD1_6

      // Outputs
    , output wire  PMOD2_7
    , output wire  PMOD2_6
    , output wire  PMOD2_5
    , output wire  PMOD2_4
    , output wire  PMOD2_3
    , output wire  PMOD2_2
    , output wire  PMOD2_1
    , output wire  PMOD2_0
    , output wire  PMOD1_5
    );
  wire  result_0;
  wire [12:0] result_1;
  wire [11:0] c$ds_app_arg;
  wire [1:0] c$ds_app_arg_0;
  wire [1:0] c$ds_case_alt;
  wire [37:0] c$ds_app_arg_1;
  wire  readyOut;
  wire  c$readyOut_app_arg;
  wire  c$readyOut_app_arg_0;
  wire [37:0] c$ds_case_alt_0;
  wire [37:0] result_2;
  wire  c$app_arg;
  wire [2:0] c$app_arg_0;
  wire [2:0] v;
  wire  c$app_arg_1;
  wire [36:0] a1;
  wire  b;
  wire [38:0] result_3;
  wire [37:0] c$ds_case_alt_1;
  wire [2:0] c$ds_app_arg_2;
  wire [39:0] ds11;
  wire  emptyState;
  reg [37:0] st = {{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},   {1 {1'bx}},
 {1 {1'bx}},   3'd0,   1'b0};
  wire [8:0] c$app_arg_2;
  wire [9:0] result_4;
  wire [37:0] s2rAc;
  wire  r2sAc;
  wire [10:0] packet;
  wire [7:0] y;
  wire [7:0] conrep;
  wire  aBwd;
  wire [38:0] result_5;
  wire [114:0] bFwd;
  wire [115:0] result_6;
  wire [37:0] aFwd;
  wire  bBwd;
  wire [35:0] result_7;
  reg [35:0] c$app_arg_3 = {32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,   1'b0,   1'b0,   1'b0,   1'b0};
  wire  inCyc;
  wire [31:0] result_8;
  wire [31:0] ilaHash;
  wire [31:0] result_9;
  wire [31:0] result_10;
  wire [31:0] c$dat_case_alt;
  wire [31:0] result_11;
  reg  c$inCyc_app_arg = 1'b0;
  wire  c$inCyc_app_arg_0;
  wire [0:0] c$$fResizeBitVector_$cextend_arg4;
  wire [0:0] c$$fResizeBitVector_$cextend_arg4_case_alt;
  wire [0:0] c$$fResizeBitVector_$cextend_arg4_case_alt_0;
  wire [31:0] result_12;
  wire [31:0] result_13;
  wire [31:0] c$case_alt;
  wire [31:0] result_14;
  wire [31:0] c$case_alt_0;
  wire [29:0] c$getWord_arg7;
  wire  c$getWord_arg7_case_scrut;
  wire [31:0] c$getWord_arg7_app_arg;
  wire [31:0] c$case_alt_1;
  wire [31:0] result_15;
  wire signed [63:0] c$case_scrut;
  wire signed [63:0] sc;
  wire signed [63:0] i;
  wire signed [63:0] c$app_arg_4;
  wire [0:0] c$app_arg_5;
  wire [0:0] result_16;
  wire [31:0] c$case_alt_2;
  wire [31:0] result_17;
  wire [31:0] c$case_alt_3;
  wire [31:0] result_18;
  wire [31:0] result_19;
  wire  b_0;
  wire  c$b_app_arg;
  wire [19:0] a1_0;
  wire signed [9:0] b1;
  wire [11:0] a1_1;
  wire [7:0] b1_0;
  wire [11:0] b1_1;
  wire [31:0] result_20;
  wire [3:0] readIndex;
  wire [33:0] result_21;
  reg [29:0] result_22;
  wire [29:0] w0;
  wire [3:0] wa0;
  wire  c$app_arg_6;
  wire [33:0] a2;
  wire [34:0] c$app_arg_7;
  wire [29:0] a1_2;
  wire [4:0] z;
  wire [3:0] result_23;
  wire [3:0] c$headTail_app_arg;
  wire [4:0] z_0;
  wire [3:0] result_24;
  wire [3:0] oldTail;
  reg [7:0] headTail = {4'd0,   4'd0};
  wire [7:0] c$headTail_app_arg_0;
  wire [7:0] c$headTail_case_alt;
  wire [4:0] z_1;
  wire [3:0] result_25;
  reg [3:0] bufferSize = 4'd0;
  wire [3:0] c$bufferSize_app_arg;
  wire [3:0] c$bufferSize_case_alt;
  wire [31:0] n1;
  wire [30:0] result_26;
  wire  b_1;
  wire [103:0] ilaRM;
  wire [30:0] lvl15;
  wire  c$t_app_arg;
  wire [4:0] c$karg_app_arg;
  wire [4:0] c$karg_app_arg_0;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_0;
  // top/Blink.hs:63:1-12
  wire [7:0] b2;
  // top/Blink.hs:63:1-12
  wire [11:0] b3;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_3;
  wire  result_27;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_1;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_0;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_0;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_4;
  wire  result_28;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_2;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_1;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_1;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_5;
  wire  result_29;
  wire  c$case_alt_4;
  wire  c$case_alt_5;
  wire  result_30;
  wire [4:0] karg;
  wire [103:0] oldMM;
  reg [104:0] s1 = {{1'b0,   1'b0,   4'd0,   1'b1,   4'd0,   32'd0,   1'd1,
  30'b111111111111111111111111111111,   30'b000000000000000000000000000000},
 1'd0};
  wire [104:0] result_31;
  wire [104:0] result_32;
  wire [104:0] c$s1_case_alt;
  wire  triggered1;
  wire [0:0] bv;
  wire [104:0] c$s1_case_alt_0;
  wire [29:0] triggerCompare1;
  wire [29:0] triggerMask1;
  wire [0:0] triggerOperation1;
  wire [31:0] triggerSelect1;
  wire [3:0] sampledAfterTrigger1;
  wire  shouldSample1;
  wire [3:0] triggerPoint1;
  wire  capture2;
  wire [4:0] z_2;
  wire [3:0] result_33;
  wire [3:0] c$app_arg_8;
  wire [103:0] c$case_alt_6;
  wire [3:0] triggerPoint1_0;
  wire [31:0] triggerSelect1_0;
  wire [0:0] triggerOperation1_0;
  wire [29:0] triggerMask1_0;
  wire [29:0] triggerCompare1_0;
  wire  c$s1_case_scrut;
  wire  c$s1_case_scrut_0;
  wire  c$s1_case_scrut_1;
  wire [104:0] result_34;
  wire [104:0] result_35;
  wire [104:0] c$case_alt_7;
  wire [0:0] triggerOperation1_1;
  wire [31:0] triggerSelect1_1;
  wire [3:0] sampledAfterTrigger1_0;
  wire  shouldSample1_0;
  wire [3:0] triggerPoint1_1;
  wire  triggered1_0;
  wire  capture2_0;
  wire [31:0] c$x_case_scrut;
  wire [31:0] v1;
  wire [31:0] karg_0;
  wire [31:0] x;
  wire [29:0] result_36;
  wire [29:0] c$setWord_arg7;
  wire  c$setWord_arg7_case_scrut;
  wire [31:0] c$setWord_arg7_app_arg;
  wire [4:0] z_3;
  wire [3:0] result_37;
  wire [3:0] c$app_arg_9;
  wire [103:0] c$case_alt_8;
  wire [3:0] triggerPoint1_2;
  wire [31:0] triggerSelect1_2;
  wire [0:0] triggerOperation1_2;
  wire [29:0] triggerMask1_1;
  wire [29:0] triggerCompare1_1;
  wire [4:0] c$karg_app_arg_1;
  wire [4:0] c$karg_app_arg_2;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_3;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_2;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_2;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_6;
  wire  result_38;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_4;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_3;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_3;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_7;
  wire  result_39;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_5;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_4;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_4;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_8;
  wire  result_40;
  wire  c$case_alt_9;
  wire  c$case_alt_10;
  wire  result_41;
  wire [4:0] karg_1;
  wire [4:0] c$karg_app_arg_3;
  wire [4:0] c$karg_app_arg_4;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_6;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_5;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_5;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_9;
  wire  result_42;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_7;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_6;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_6;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_10;
  wire  result_43;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_8;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_7;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_7;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_11;
  wire  result_44;
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  wire  result_45;
  wire [4:0] karg_2;
  wire [4:0] z_4;
  wire [3:0] result_46;
  wire [3:0] c$app_arg_10;
  wire [103:0] c$case_alt_13;
  wire [3:0] triggerPoint1_3;
  wire [31:0] triggerSelect1_3;
  wire [0:0] triggerOperation1_3;
  wire [29:0] triggerMask1_2;
  wire [29:0] triggerCompare1_2;
  wire [104:0] c$case_alt_14;
  wire [104:0] result_47;
  wire  capture2_1;
  wire  triggered1_1;
  wire [3:0] triggerPoint1_4;
  wire  shouldSample1_1;
  wire [3:0] sampledAfterTrigger1_1;
  wire [0:0] triggerOperation1_4;
  wire [29:0] triggerMask1_3;
  wire [29:0] triggerCompare1_3;
  wire [4:0] c$karg_app_arg_5;
  wire [4:0] c$karg_app_arg_6;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_9;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_8;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_8;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_12;
  wire  result_48;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_10;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_9;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_9;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_13;
  wire  result_49;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_11;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_10;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_10;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_14;
  wire  result_50;
  wire  c$case_alt_15;
  wire  c$case_alt_16;
  wire  result_51;
  wire [4:0] karg_3;
  wire signed [63:0] c$ds_app_arg_3;
  wire signed [63:0] x1;
  reg [0:0] c$case_alt_17;
  wire [0:0] result_52;
  wire [63:0] eta;
  wire signed [63:0] ds;
  wire [4:0] z_5;
  wire [3:0] result_53;
  wire [3:0] c$app_arg_11;
  wire [103:0] c$case_alt_18;
  wire [3:0] triggerPoint1_5;
  wire [31:0] triggerSelect1_4;
  wire [0:0] triggerOperation1_5;
  wire [29:0] triggerMask1_4;
  wire [29:0] triggerCompare1_4;
  wire [104:0] c$case_alt_19;
  wire [104:0] result_54;
  wire  capture2_2;
  wire  triggered1_2;
  wire [3:0] triggerPoint1_6;
  wire  shouldSample1_2;
  wire [3:0] sampledAfterTrigger1_2;
  wire [31:0] triggerSelect1_5;
  wire [29:0] triggerMask1_5;
  wire [29:0] triggerCompare1_5;
  wire [4:0] c$karg_app_arg_7;
  wire [4:0] c$karg_app_arg_8;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_12;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_11;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_11;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_15;
  wire  result_55;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_13;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_12;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_12;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_16;
  wire  result_56;
  // top/Blink.hs:63:1-12
  wire [11:0] a2_14;
  // top/Blink.hs:63:1-12
  wire [7:0] b2_13;
  // top/Blink.hs:63:1-12
  wire [11:0] b3_13;
  // top/Blink.hs:63:1-12
  wire [19:0] a1_17;
  wire  result_57;
  wire  c$case_alt_20;
  wire  c$case_alt_21;
  wire  result_58;
  wire [4:0] karg_4;
  wire [4:0] z_6;
  wire [3:0] result_59;
  wire [3:0] c$app_arg_12;
  wire [103:0] c$case_alt_22;
  wire [3:0] triggerPoint1_7;
  wire [31:0] triggerSelect1_6;
  wire [0:0] triggerOperation1_6;
  wire [29:0] triggerMask1_6;
  wire [29:0] triggerCompare1_6;
  wire [104:0] c$case_alt_23;
  wire [104:0] result_60;
  wire  capture2_3;
  wire  triggered1_3;
  wire  shouldSample1_3;
  wire [3:0] sampledAfterTrigger1_3;
  wire [31:0] triggerSelect1_7;
  wire [0:0] triggerOperation1_7;
  wire [29:0] triggerMask1_7;
  wire [29:0] triggerCompare1_7;
  wire signed [9:0] c$app_arg_13;
  reg signed [9:0] result_61 = 10'sd40;
  wire [7:0] c$app_arg_14;
  reg [7:0] result_62 = 8'd20;
  wire [11:0] c$app_arg_15;
  reg [11:0] result_63 = 12'd0;
  wire [38:0] result_64;
  wire [37:0] c$ds_app_arg_4;
  wire [41:0] c$ds_app_arg_5;
  wire [41:0] c$ds_case_alt_2;
  wire [41:0] c$ds_case_alt_3;
  wire  c$ds_case_scrut;
  wire  c$ds_app_arg_6;
  wire  c$ds_app_arg_7;
  wire [3:0] c$ds13_app_arg;
  wire [1:0] a1_18;
  wire [2:0] c$ds13_app_arg_0;
  wire [0:0] c$ds_app_arg_8;
  wire  nextFlush;
  wire  c$nextFlush_app_arg;
  wire [31:0] c$ds_app_arg_9;
  wire [31:0] c$ds_app_arg_10;
  wire [15:0] c$ds_app_arg_11;
  wire [20:0] fwdIn;
  wire [15:0] v1_0;
  wire [15:0] v1_1;
  wire [31:0] c$v1_case_scrut;
  reg [41:0] st_0 = {{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},   1'd0,   3'd0,
 1'b0,   1'b0,   {4 {1'bx}}};
  wire  bwd1;
  wire  b_2;
  wire [21:0] result_65;
  wire [38:0] result_66;
  wire  c$ds1_app_arg;
  wire [17:0] result_67;
  wire [26:0] result_68;
  wire [16:0] c$ds_case_alt_4;
  wire [15:0] x_0;
  wire  c$ds_case_alt_5;
  wire  c$ds_case_alt_6;
  wire [8:0] c$ds_case_alt_7;
  wire [16:0] o1;
  wire [8:0] c$ds_case_alt_8;
  wire [8:0] \s' ;
  wire [25:0] ds_0;
  wire [7:0] m1;
  wire [7:0] i1;
  wire  bwd1_0;
  wire  b_3;
  wire [9:0] result_69;
  wire [8:0] s2rAc_0;
  reg [8:0] s1_0 = {1'b0,8'bxxxxxxxx};
  wire [9:0] result_70;
  wire [44:0] c$ds1_case_alt;
  wire [8:0] c$ds1_app_arg_0;
  wire [7:0] brRead1;
  wire  c$ds1_app_arg_1;
  wire [13:0] c$ds1_app_arg_2;
  wire [4:0] rAddr1;
  wire [10:0] ds8;
  wire [10:0] c$ds8_case_alt;
  wire [5:0] z_7;
  wire [4:0] result_71;
  wire [4:0] rAddr0;
  wire  c$ds8_case_scrut;
  wire [5:0] amtLeft2;
  wire [13:0] ds7;
  wire [13:0] c$ds7_case_alt;
  wire [7:0] push;
  wire [5:0] amtLeft1;
  wire [10:0] ds6;
  wire [8:0] maybePush;
  wire [8:0] c$maybePush_case_alt;
  wire [7:0] a1_19;
  wire  inpB;
  wire  lvl15_0;
  wire [8:0] c$ds_app_arg_12;
  wire [7:0] result_72;
  wire [4:0] wr;
  wire [7:0] wrdata;
  reg [8:0] ds_1 = {1'b0,   {8 {1'bx}}};
  reg [7:0] result_73;
  wire [7:0] w0_0;
  wire [4:0] wa0_0;
  wire  c$app_arg_16;
  wire [12:0] a1_20;
  wire [5:0] z_8;
  wire [4:0] result_74;
  wire [5:0] amtLeft0;
  wire [4:0] wAddr0;
  reg [15:0] ds_2 = {5'd0,   5'd0,   6'd32};
  reg [12:0] c$ds_app_arg_13 = {2'b00,11'bxxxxxxxxxxx};
  wire [38:0] result_75;
  wire [8:0] s2rAc_1;
  wire  r2sAc_0;
  wire [20:0] outwardsData;
  wire [33:0] c$case_alt_24;
  wire  bwdData;
  reg [33:0] c$case_alt_25;
  wire [33:0] c$case_alt_26;
  wire [33:0] c$case_alt_27;
  wire [33:0] c$case_alt_28;
  wire [33:0] c$case_alt_29;
  wire [33:0] c$case_alt_30;
  wire [33:0] c$case_alt_31;
  wire  c$app_arg_17;
  wire [0:0] w;
  wire [9:0] n;
  wire [33:0] c$case_alt_32;
  wire [33:0] c$case_alt_33;
  wire [7:0] ds_3;
  wire [7:0] ds1;
  wire [9:0] c$case_alt_34;
  wire [9:0] result_76;
  wire [9:0] result_77;
  wire [9:0] result_78;
  wire [9:0] c$case_alt_35;
  wire  c$app_arg_18;
  wire [0:0] n_0;
  wire [33:0] c$case_alt_36;
  wire [33:0] c$case_alt_37;
  wire [33:0] result_79;
  wire [7:0] scrut;
  wire [15:0] word;
  wire [16:0] fwdData;
  wire  c$b_app_arg_0;
  wire [8:0] result_80;
  wire [8:0] result_81;
  reg [8:0] hold = {1'b0,8'bxxxxxxxx};
  wire [8:0] incoming;
  wire  ack;
  wire  b_4;
  wire [8:0] t;
  wire [7:0] a1_21;
  wire [9:0] bFwd_0;
  wire [8:0] c$ds2_app_arg;
  wire [16:0] result_82;
  wire [16:0] c$case_alt_38;
  wire [15:0] result_83;
  wire [15:0] c$ds4_case_alt;
  wire [15:0] c$ds4_case_alt_0;
  wire  periodDone;
  wire [7:0] d;
  wire  c$b_app_arg_1;
  wire  result_84;
  reg  uartTxNoBaudGen_lvl3_c$app_arg = 1'b0;
  wire [1:0] result_85;
  reg [16:0] ds2 = {{1'b0,14'bxxxxxxxxxxxxxx},   {1'b1,   1'b0}};
  wire  ack_0;
  reg  uartTxNoBaudGen_lvl3_old = 1'b0;
  reg [8:0] result_86 = {1'b0,8'bxxxxxxxx};
  wire [8:0] result_87;
  wire  c$b_app_arg_2;
  reg  old = 1'b0;
  wire  s;
  wire [8:0] fsmOut;
  reg [22:0] result_88;
  wire [22:0] c$case_alt_39;
  wire [8:0] c$app_arg_19;
  wire [13:0] c$app_arg_20;
  wire  middleSample;
  wire [13:0] result_89;
  wire [13:0] c$case_alt_40;
  wire  middleSample_0;
  reg [7:0] nextWord;
  wire [3:0] c$app_arg_21;
  wire [13:0] result_90;
  wire [13:0] c$case_alt_41;
  wire  middleSample_1;
  wire [3:0] c$app_arg_22;
  wire [22:0] c$case_alt_42;
  wire  c$case_scrut_0;
  wire  c$case_scrut_1;
  reg  uartRxNoBaudGen_lvl4_c$ds1_app_arg = 1'b1;
  wire signed [63:0] ds_4;
  wire signed [63:0] result_91;
  wire signed [63:0] c$ds_app_arg_14;
  wire [11:0] c$ds_app_arg_15;
  wire [2:0] result_92;
  wire signed [63:0] \x# ;
  reg [0:0] c$case_alt_43;
  wire  result_93;
  reg [2:0] shiftReg = {1'b1,   1'b1,   1'b1};
  wire [2:0] c$shiftReg_app_arg;
  reg  uartRxNoBaudGen_lvl4_c$shiftReg_app_arg = 1'b1;
  reg  uartRxNoBaudGen_lvl4_c$shiftReg_app_arg_0 = 1'b1;
  reg [13:0] c$ds1_app_arg_3 = {2'b00,12'bxxxxxxxxxxxx};
  wire [10:0] result_94;
  reg [16:0] cnt = 17'd0;
  wire  result_95;
  wire [10:0] result_96;
  wire [8:0] transmit;
  wire [7:0] a1_22;
  wire [3:0] packedFields_0;
  wire  g1;
  wire  g2;
  wire  g3;
  wire  g4;
  wire [0:0] c$packedFields_app_arg;
  wire [0:0] c$packedFields_app_arg_0;
  wire [0:0] c$packedFields_app_arg_1;
  wire [0:0] c$packedFields_app_arg_2;
  wire [3:0] result_97;
  wire [3:0] PMOD3;
  wire [2:0] c$bv;
  wire [37:0] c$readyOut_app_arg_selection_1;
  wire [37:0] c$ds_case_alt_selection_4;
  wire [3:0] c$app_arg_selection_1;
  wire [3:0] c$app_arg_selection_4;
  wire [3:0] c$app_arg_selection_7;
  wire [11:0] c$app_arg_selection_10;
  wire [7:0] y_projection;
  wire [74:0] result_fun_arg;
  wire [31:0] result_projection;
  wire [63:0] c$bv_0;
  wire [31:0] result_projection_0;
  wire [31:0] c$bv_1;
  wire [4:0] c$bv_2;
  wire [4:0] c$bv_3;
  wire [31:0] c$bv_4;
  wire [4:0] c$vec;
  wire [4:0] c$vec2;
  wire [31:0] c$bv_5;
  wire [31:0] v1_projection;
  wire [31:0] c$bv_6;
  wire [4:0] c$vec_0;
  wire [4:0] c$vec2_0;
  wire [31:0] c$bv_7;
  wire [4:0] c$vec_1;
  wire [4:0] c$vec2_1;
  wire [31:0] c$bv_8;
  wire [4:0] c$vec_2;
  wire [4:0] c$vec2_2;
  wire signed [63:0] x1_projection;
  wire signed [63:0] c$case_alt_selection_res;
  wire [31:0] c$bv_9;
  wire [31:0] c$bv_10;
  wire [4:0] c$vec_3;
  wire [4:0] c$vec2_3;
  wire [31:0] c$bv_11;
  wire [2:0] c$ds13_app_arg_selection_2;
  wire [0:0] c$bv_12;
  wire [2:0] c$nextFlush_app_arg_selection_2;
  wire [0:0] c$i_129;
  wire [31:0] c$vec_4;
  wire [15:0] c$vec_5;
  wire [8:0] result_selection_49;
  wire [5:0] c$bv_13;
  wire [13:0] c$ds_app_arg_selection_15;
  wire [4:0] c$i_154;
  wire [13:0] w0_selection_3;
  wire [13:0] wa0_selection_3;
  wire [13:0] c$app_arg_selection_28;
  wire [5:0] c$bv_14;
  wire [14:0] result_selection_62;
  wire [9:0] c$bv_15;
  wire [7:0] c$bv_16;
  wire [3:0] c$vec_6;
  wire signed [63:0] c$case_alt_selection_res_0;
  wire [3:0] c$shiftReg_app_arg_projection;
  wire [15:0] c$bv_18;
  wire [16:0] c$bv_19;
  wire [8:0] result;
  wire [7:0] PMOD2;

  assign PMOD3 = {PMOD3_7,   PMOD3_6,
                  PMOD3_5,   PMOD3_4};

  assign result_0 = bFwd_0[0:0];

  assign result_1 = {result_3[38:38],
                     c$ds_app_arg};

  assign c$ds_app_arg = ((st[3:1] > 3'd0) | st[0:0]) ? {1'b1,{ds11[39:32],
                                                              c$ds_app_arg_0,
                                                              st[4:4]}} : {1'b0,11'bxxxxxxxxxxx};

  assign c$ds_app_arg_0 = st[0:0] ? {1'b1,1'd0} : c$ds_case_alt;

  assign c$bv = st[3:1];

  assign c$ds_case_alt = (c$readyOut_app_arg & st[5:5]) ? {1'b1,c$bv[0+:1]} : {1'b0,1'bx};

  assign c$ds_app_arg_1 = readyOut ? c$ds_case_alt_0 : c$ds_case_alt_1;

  assign readyOut = c$readyOut_app_arg_0 & (emptyState | (c$readyOut_app_arg & r2sAc));

  assign c$readyOut_app_arg = st[3:1] <= 3'd1;

  assign c$readyOut_app_arg_selection_1 = result_3[37:0];

  assign c$readyOut_app_arg_0 = c$readyOut_app_arg_selection_1[37:37] ? 1'b1 : 1'b0;

  assign c$ds_case_alt_selection_4 = result_3[37:0];

  assign c$ds_case_alt_0 = c$ds_case_alt_selection_4[37:37] ? result_2 : {{4 {8'bxxxxxxxx}},
                                                                          {1 {1'bx}},   {1 {1'bx}},   {3 {1'bx}},
                                                                          {1 {1'bx}}};

  assign result_2 = {a1[36:5],   c$app_arg_1,
                     a1[0:0],   c$app_arg_0,   c$app_arg};

  assign c$app_arg_selection_1 = a1[4:1];

  assign c$app_arg = c$app_arg_selection_1[3:3] ? (v == 3'd0) : 1'b0;

  assign c$app_arg_selection_4 = a1[4:1];

  assign c$app_arg_0 = c$app_arg_selection_4[3:3] ? v : 3'd4;

  assign v = a1[3:1];

  assign c$app_arg_selection_7 = a1[4:1];

  assign c$app_arg_1 = c$app_arg_selection_7[3:3] ? 1'b1 : 1'b0;

  assign a1 = result_3[36:0];

  assign b = ~ (BTN);

  assign result_3 = b ? {1'b0,
                         {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {readyOut,
                                                                              s2rAc};

  assign c$ds_case_alt_1 = ((~ emptyState) & r2sAc) ? {ds11[31:0],
                                                       st[5:5],   st[4:4],   c$ds_app_arg_2,
                                                       1'b0} : st;

  assign c$ds_app_arg_2 = (st[3:1] < 3'd1) ? 3'd0 : (st[3:1] - 3'd1);

  assign ds11 = ({st[37:6],({1 {(8'd0)}})});

  assign emptyState = (st[3:1] == 3'd0) & (~ st[0:0]);

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : st_register
    if ( ! BTN) begin
      st <= {{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},   {1 {1'bx}},
   {1 {1'bx}},   3'd0,   1'b0};
    end else begin
      st <= c$ds_app_arg_1;
    end
  end
  // register end

  assign c$app_arg_selection_10 = result_1[11:0];

  assign c$app_arg_2 = c$app_arg_selection_10[11:11] ? {1'b1,conrep} : {1'b0,8'bxxxxxxxx};

  assign result_4 = {result_1[12:12],
                     c$app_arg_2};

  assign s2rAc = result_5[37:0];

  assign r2sAc = aBwd;

  assign packet = result_1[10:0];

  assign y_projection = packet[10:3];

  assign y = y_projection;

  assign conrep = y[8-1 -: 8];

  assign aBwd = result_96[10:10];

  assign result_5 = {result_6[115:115],
                     bFwd[114:77]};

  assign bFwd = result_6[114:0];

  assign result_fun_arg = {aFwd,   {bBwd,
                                    result_7}};

  Blink_topEntity_etherboneC Blink_topEntity_etherboneC_result_6
    ( .result (result_6)
    , .c$ds2_bindCsr (CLK)
    , .c$ds2_bindCsr_0 (BTN)
    , .eta2 (result_fun_arg) );

  assign aFwd = result_75[37:0];

  assign bBwd = result_4[9:9];

  assign result_7 = c$app_arg_3;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : c$app_arg_3_register
    if ( ! BTN) begin
      c$app_arg_3 <= {32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,   1'b0,   1'b0,   1'b0,   1'b0};
    end else begin
      c$app_arg_3 <= {result_8,   inCyc,   1'b0,   1'b0,   1'b0};
    end
  end
  // register end

  assign inCyc = c$inCyc_app_arg_0 & c$inCyc_app_arg;

  assign result_8 = ((bFwd[76:45] == 32'b00000000000000000000000000000010) & (bFwd[12:9] == 4'b1111)) ? ilaHash : result_9;

  assign ilaHash = 32'b01010011111011110111110101010100;

  assign result_9 = c$s1_case_scrut_1 ? result_10 : result_18;

  assign result_10 = c$s1_case_scrut_0 ? result_11 : c$dat_case_alt;

  assign c$dat_case_alt = c$s1_case_scrut ? result_11 : result_18;

  assign result_11 = {31'b0000000000000000000000000000000,c$$fResizeBitVector_$cextend_arg4};

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : c$inCyc_app_arg_register
    if ( ! BTN) begin
      c$inCyc_app_arg <= 1'b0;
    end else begin
      c$inCyc_app_arg <= c$inCyc_app_arg_0;
    end
  end
  // register end

  assign c$inCyc_app_arg_0 = bFwd[6:6] & bFwd[7:7];

  assign c$$fResizeBitVector_$cextend_arg4 = c$s1_case_scrut_0 ? (c$$fResizeBitVector_$cextend_arg4_case_alt) : (c$$fResizeBitVector_$cextend_arg4_case_alt_0);

  assign c$$fResizeBitVector_$cextend_arg4_case_alt = ilaRM[103:103] ? 1'b1 : 1'b0;

  assign c$$fResizeBitVector_$cextend_arg4_case_alt_0 = ilaRM[102:102] ? 1'b1 : 1'b0;

  assign result_12 = (bFwd[12:9] == 4'b1111) ? result_13 : c$case_alt_0;

  assign result_13 = c$getWord_arg7_case_scrut ? result_14 : c$case_alt;

  assign c$case_alt = (c$getWord_arg7_app_arg == 32'b00010001000000000000000000000000) ? result_14 : c$case_alt_0;

  assign result_projection = ({2'b00,c$getWord_arg7});

  assign result_14 = result_projection[31:0];

  assign c$case_alt_0 = ilaRM[97:97] ? 32'b00000000000000000000000000000000 : result_19;

  assign c$getWord_arg7 = c$getWord_arg7_case_scrut ? ilaRM[59:30] : ilaRM[29:0];

  assign c$getWord_arg7_case_scrut = c$getWord_arg7_app_arg == 32'b00010000000000000000000000000000;

  assign c$getWord_arg7_app_arg = bFwd[76:45] & 32'b11111111000000000000000000000000;

  assign c$case_alt_1 = (bFwd[12:9] == 4'b1111) ? ilaRM[92:61] : result_12;

  assign result_15 = (bFwd[76:45] == 32'b00000000000000000000000000000100) ? c$case_alt_1 : result_12;

  assign c$case_scrut = c$app_arg_5 ? (64'sd1) : (64'sd0);

  assign sc = c$case_scrut;

  assign i = sc;

  assign c$app_arg_4 = i;

  assign c$app_arg_5 = ilaRM[60:60] ? 1'd1 : 1'd0;

  assign c$bv_0 = (($unsigned(c$app_arg_4[0+:64])));

  assign result_16 = ((c$bv_0[0+:1]));

  assign c$case_alt_2 = (bFwd[12:9] == 4'b0001) ? ({31'b0000000000000000000000000000000,result_16}) : result_15;

  assign result_17 = (bFwd[76:45] == 32'b00000000000000000000000000000011) ? c$case_alt_2 : result_15;

  assign c$case_alt_3 = (bFwd[12:9] == 4'b1111) ? ({28'b0000000000000000000000000000,((ilaRM[101:98]))}) : result_17;

  assign result_18 = (bFwd[76:45] == 32'b00000000000000000000000000000001) ? c$case_alt_3 : result_17;

  assign result_19 = b_0 ? result_20 : 32'b00000000000000000000000000000000;

  assign b_0 = (~ bFwd[5:5]) & c$b_app_arg;

  assign c$b_app_arg = (bFwd[6:6] & bFwd[7:7]) & ((bFwd[76:45] >= 32'b00110000000000000000000000000000) & (bFwd[76:45] <= 32'b00111111111111111111111111111111));

  assign a1_0 = result_21[33:14];

  assign b1 = $signed(result_21[13:4]);

  assign a1_1 = a1_0[19:8];

  assign b1_0 = a1_0[7:0];

  assign b1_1 = a1_1;

  assign result_projection_0 = ({2'b00,({({((b1_1)),((b1_0))}),(($unsigned(b1)))})});

  assign result_20 = result_projection_0[31:0];

  assign c$bv_1 = (n1 / 32'b00000000000000000000000000000001);

  assign readIndex = (c$bv_1[0+:4]);

  assign result_21 = {result_22,   bufferSize};

  // blockRam1 begin
  reg [29:0] result_22_RAM [0:10-1];
  integer i_2;
  initial begin
      for (i_2=0;i_2<10;i_2=i_2+1) begin
          result_22_RAM[i_2] = ({30 {1'bx}});
      end
  end


  always @(posedge CLK) begin : result_22_blockRam
    if (c$app_arg_6) begin
      result_22_RAM[($unsigned({{(64-4) {1'b0}},wa0}))] <= w0;
    end
    result_22 <= result_22_RAM[($unsigned({{(64-4) {1'b0}},result_23}))];
  end
  // blockRam1 end

  assign w0 = c$app_arg_7[34:34] ? a2[29:0] : {{{12 {1'bx}},
                                                {8 {1'bx}}},   {10 {1'bx}}};

  assign wa0 = c$app_arg_7[34:34] ? a2[33:30] : ({4 {1'bx}});

  assign c$app_arg_6 = c$app_arg_7[34:34] ? 1'b1 : 1'b0;

  assign a2 = c$app_arg_7[33:0];

  assign c$app_arg_7 = result_26[30:30] ? {1'b1,{oldTail,
                                                 a1_2}} : {1'b0,34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign a1_2 = result_26[29:0];

  assign z = headTail[7:4] + readIndex;

  assign c$bv_2 = (z - 5'd10);

  assign result_23 = (z >= 5'd10) ? (c$bv_2[0+:4]) : (z[0+:4]);

  assign c$headTail_app_arg = (bufferSize == 4'd10) ? result_24 : 4'd0;

  assign z_0 = oldTail + 4'd1;

  assign c$bv_3 = (z_0 - 5'd10);

  assign result_24 = (z_0 >= 5'd10) ? (c$bv_3[0+:4]) : (z_0[0+:4]);

  assign oldTail = headTail[3:0];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : headTail_register
    if ( ! BTN) begin
      headTail <= {4'd0,   4'd0};
    end else begin
      headTail <= c$headTail_app_arg_0;
    end
  end
  // register end

  assign c$headTail_app_arg_0 = c$t_app_arg ? {4'd0,
                                               4'd0} : c$headTail_case_alt;

  assign c$headTail_case_alt = result_26[30:30] ? {c$headTail_app_arg,
                                                   result_24} : headTail;

  assign z_1 = bufferSize + 4'd1;

  assign result_25 = (z_1 > 5'd10) ? 4'd10 : (z_1[0+:4]);

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : bufferSize_register
    if ( ! BTN) begin
      bufferSize <= 4'd0;
    end else begin
      bufferSize <= c$bufferSize_app_arg;
    end
  end
  // register end

  assign c$bufferSize_app_arg = c$t_app_arg ? 4'd0 : c$bufferSize_case_alt;

  assign c$bufferSize_case_alt = result_26[30:30] ? result_25 : bufferSize;

  assign n1 = bFwd[76:45] - 32'b00110000000000000000000000000000;

  assign result_26 = b_1 ? lvl15 : {1'b0,30'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign b_1 = (~ (~ ilaRM[97:97])) & ilaRM[103:103];

  assign ilaRM = s1[104:1];

  assign lvl15 = {1'b1,{{result_63,   result_62},
                        result_61}};

  assign c$t_app_arg = s1[0:0] ? 1'b1 : 1'b0;

  assign c$bv_4 = oldMM[92:61];

  assign c$vec = ((c$bv_4[0+:5]));

  // map begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 5; i_3 = i_3 + 1) begin : map
    wire [0:0] map_in;
    assign map_in = c$vec[i_3*1+:1];
    wire  map_out;
    assign map_out = map_in == 1'b1;


    assign c$karg_app_arg[i_3*1+:1] = map_out;
  end
  endgenerate
  // map end

  // reverse begin
  genvar i_4;
  generate
  for (i_4 = 0; i_4 < 5; i_4 = i_4 + 1) begin : reverse
    assign c$karg_app_arg_0[(5 - 1 - i_4)*1+:1] = c$karg_app_arg[i_4*1+:1];
  end
  endgenerate
  // reverse end

  assign a2_0 = a1_3[19:8];

  assign b2 = a1_3[7:0];

  assign b3 = a2_0;

  assign a1_3 = {result_63,   result_62};

  assign result_27 = ((({(({((((b3)))),((b2))})),(($unsigned(result_61)))})) & oldMM[59:30]) == oldMM[29:0];

  assign a2_1 = a1_4[19:8];

  assign b2_0 = a1_4[7:0];

  assign b3_0 = a2_1;

  assign a1_4 = {result_63,   result_62};

  assign result_28 = ((({(({((((b3_0)))),((b2_0))})),(($unsigned(result_61)))})) & oldMM[59:30]) > oldMM[29:0];

  assign a2_2 = a1_5[19:8];

  assign b2_1 = a1_5[7:0];

  assign b3_1 = a2_2;

  assign a1_5 = {result_63,   result_62};

  assign result_29 = ((({(({((((b3_1)))),((b2_1))})),(($unsigned(result_61)))})) & oldMM[59:30]) < oldMM[29:0];

  wire [4:0] vec_1;
  wire  acc_3_0;
  wire  acc_0_5;
  wire  acc_0_6;
  wire  acc_0_7;
  wire  acc_0_8;
  wire  acc_1_0_1;
  wire  acc_1_1;
  wire  acc_2_0;
  wire  acc_0_9;
  assign c$case_alt_4 = acc_3_0;

  assign vec_1 = (karg);

  assign acc_0_5 = vec_1[4:4];

  assign acc_0_6 = vec_1[3:3];

  assign acc_0_7 = vec_1[2:2];

  assign acc_0_8 = vec_1[1:1];

  assign acc_0_9 = vec_1[0:0];

  assign acc_1_0_1 = acc_0_5 & acc_0_6;



  assign acc_1_1 = acc_0_7 & acc_0_8;



  assign acc_2_0 = acc_1_0_1 & acc_1_1;



  assign acc_3_0 = acc_2_0 & acc_0_9;





  wire [4:0] vec_2;
  wire  acc_3_0_5;
  wire  acc_0_11;
  wire  acc_0_12;
  wire  acc_0_13;
  wire  acc_0_14;
  wire  acc_1_0_2;
  wire  acc_1_1_3;
  wire  acc_2_0_4;
  wire  acc_0_15;
  assign c$case_alt_5 = acc_3_0_5;

  assign vec_2 = (karg);

  assign acc_0_11 = vec_2[4:4];

  assign acc_0_12 = vec_2[3:3];

  assign acc_0_13 = vec_2[2:2];

  assign acc_0_14 = vec_2[1:1];

  assign acc_0_15 = vec_2[0:0];

  assign acc_1_0_2 = acc_0_11 | acc_0_12;



  assign acc_1_1_3 = acc_0_13 | acc_0_14;



  assign acc_2_0_4 = acc_1_0_2 | acc_1_1_3;



  assign acc_3_0_5 = acc_2_0_4 | acc_0_15;





  assign result_30 = oldMM[60:60] ? c$case_alt_5 : c$case_alt_4;

  assign c$vec2 = {result_27,   result_28,
                   result_29,   1'b1,   1'b0};

  // zipWith start
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 5; i_5 = i_5 + 1) begin : zipWith
    wire  zipWith_in1;
    assign zipWith_in1 = c$karg_app_arg_0[i_5*1+:1];
    wire  zipWith_in2;
    assign zipWith_in2 = c$vec2[i_5*1+:1];
    wire  c$n;
    wire  c$case_alt_47;
    wire  c$case_alt_48;
    wire  result_98;
    assign c$n = result_98;

    assign c$case_alt_47 = zipWith_in1 ? zipWith_in2 : 1'b0;

    assign c$case_alt_48 = zipWith_in1 ? zipWith_in2 : 1'b1;

    assign result_98 = oldMM[60:60] ? c$case_alt_47 : c$case_alt_48;


    assign karg[i_5*1+:1] = c$n;
  end
  endgenerate
  // zipWith end

  assign oldMM = s1[104:1];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : s1_register
    if ( ! BTN) begin
      s1 <= {{1'b0,   1'b0,   4'd0,   1'b1,   4'd0,   32'd0,   1'd1,
    30'b111111111111111111111111111111,   30'b000000000000000000000000000000},
   1'd0};
    end else begin
      s1 <= result_31;
    end
  end
  // register end

  assign result_31 = ((bFwd[6:6] & bFwd[7:7]) & bFwd[5:5]) ? result_32 : {c$case_alt_6,
                                                                          1'd0};

  assign result_32 = c$s1_case_scrut_1 ? c$s1_case_alt : result_60;

  assign c$s1_case_alt = c$s1_case_scrut_0 ? {{bv == 1'b1,
                                               triggered1,   triggerPoint1,   shouldSample1,
                                               sampledAfterTrigger1,   triggerSelect1,
                                               triggerOperation1,   triggerMask1,
                                               triggerCompare1},   1'd0} : c$s1_case_alt_0;

  assign triggered1 = c$case_alt_6[102:102];

  assign c$bv_5 = bFwd[44:13];

  assign bv = c$bv_5[0+:1];

  assign c$s1_case_alt_0 = c$s1_case_scrut ? {{capture2,
                                               1'b0,   triggerPoint1,   shouldSample1,
                                               sampledAfterTrigger1,   triggerSelect1,
                                               triggerOperation1,   triggerMask1,
                                               triggerCompare1},   1'd1} : result_60;

  assign triggerCompare1 = c$case_alt_6[29:0];

  assign triggerMask1 = c$case_alt_6[59:30];

  assign triggerOperation1 = c$case_alt_6[60:60];

  assign triggerSelect1 = c$case_alt_6[92:61];

  assign sampledAfterTrigger1 = c$case_alt_6[96:93];

  assign shouldSample1 = c$case_alt_6[97:97];

  assign triggerPoint1 = c$case_alt_6[101:98];

  assign capture2 = c$case_alt_6[103:103];

  assign z_2 = 4'd1 + oldMM[96:93];

  assign result_33 = (z_2 > 5'd9) ? 4'd9 : (z_2[0+:4]);

  assign c$app_arg_8 = oldMM[102:102] ? result_33 : 4'd0;

  assign c$case_alt_6 = {1'b1,
                         oldMM[102:102] | result_30,   triggerPoint1_0,
                         (~ oldMM[102:102]) | (oldMM[96:93] < triggerPoint1_0),
                         c$app_arg_8,   triggerSelect1_0,
                         triggerOperation1_0,   triggerMask1_0,
                         triggerCompare1_0};

  assign triggerPoint1_0 = oldMM[101:98];

  assign triggerSelect1_0 = oldMM[92:61];

  assign triggerOperation1_0 = oldMM[60:60];

  assign triggerMask1_0 = oldMM[59:30];

  assign triggerCompare1_0 = oldMM[29:0];

  assign c$s1_case_scrut = bFwd[12:9] == 4'b0010;

  assign c$s1_case_scrut_0 = bFwd[12:9] == 4'b0001;

  assign c$s1_case_scrut_1 = bFwd[76:45] == 32'b00000000000000000000000000000000;

  assign result_34 = (bFwd[12:9] == 4'b1111) ? result_35 : {c$case_alt_8,
                                                            1'd0};

  assign result_35 = c$setWord_arg7_case_scrut ? {{capture2_0,
                                                   triggered1_0,   triggerPoint1_1,
                                                   shouldSample1_0,   sampledAfterTrigger1_0,
                                                   triggerSelect1_1,   triggerOperation1_1,
                                                   result_36,   c$case_alt_8[29:0]},
                                                  1'd0} : c$case_alt_7;

  assign c$case_alt_7 = (c$setWord_arg7_app_arg == 32'b00010001000000000000000000000000) ? {{capture2_0,
                                                                                             triggered1_0,
                                                                                             triggerPoint1_1,
                                                                                             shouldSample1_0,
                                                                                             sampledAfterTrigger1_0,
                                                                                             triggerSelect1_1,
                                                                                             triggerOperation1_1,
                                                                                             c$case_alt_8[59:30],
                                                                                             result_36},
                                                                                            1'd0} : {c$case_alt_8,
                                                                                                     1'd0};

  assign triggerOperation1_1 = c$case_alt_8[60:60];

  assign triggerSelect1_1 = c$case_alt_8[92:61];

  assign sampledAfterTrigger1_0 = c$case_alt_8[96:93];

  assign shouldSample1_0 = c$case_alt_8[97:97];

  assign triggerPoint1_1 = c$case_alt_8[101:98];

  assign triggered1_0 = c$case_alt_8[102:102];

  assign capture2_0 = c$case_alt_8[103:103];

  assign c$x_case_scrut = bFwd[44:13];

  assign v1_projection = ({2'b00,(c$setWord_arg7)});

  assign v1 = v1_projection[31:0];

  assign karg_0 = (x);

  assign x = c$x_case_scrut[31:0];

  assign result_36 = karg_0[0+:30];

  assign c$setWord_arg7 = c$setWord_arg7_case_scrut ? c$case_alt_8[59:30] : c$case_alt_8[29:0];

  assign c$setWord_arg7_case_scrut = c$setWord_arg7_app_arg == 32'b00010000000000000000000000000000;

  assign c$setWord_arg7_app_arg = bFwd[76:45] & 32'b11111111000000000000000000000000;

  assign z_3 = 4'd1 + oldMM[96:93];

  assign result_37 = (z_3 > 5'd9) ? 4'd9 : (z_3[0+:4]);

  assign c$app_arg_9 = oldMM[102:102] ? result_37 : 4'd0;

  assign c$case_alt_8 = {1'b1,
                         oldMM[102:102] | result_41,   triggerPoint1_2,
                         (~ oldMM[102:102]) | (oldMM[96:93] < triggerPoint1_2),
                         c$app_arg_9,   triggerSelect1_2,
                         triggerOperation1_2,   triggerMask1_1,
                         triggerCompare1_1};

  assign triggerPoint1_2 = oldMM[101:98];

  assign triggerSelect1_2 = oldMM[92:61];

  assign triggerOperation1_2 = oldMM[60:60];

  assign triggerMask1_1 = oldMM[59:30];

  assign triggerCompare1_1 = oldMM[29:0];

  assign c$bv_6 = oldMM[92:61];

  assign c$vec_0 = ((c$bv_6[0+:5]));

  // map begin
  genvar i_6;
  generate
  for (i_6=0; i_6 < 5; i_6 = i_6 + 1) begin : map_0
    wire [0:0] map_in_0;
    assign map_in_0 = c$vec_0[i_6*1+:1];
    wire  map_out_0;
    assign map_out_0 = map_in_0 == 1'b1;


    assign c$karg_app_arg_1[i_6*1+:1] = map_out_0;
  end
  endgenerate
  // map end

  // reverse begin
  genvar i_7;
  generate
  for (i_7 = 0; i_7 < 5; i_7 = i_7 + 1) begin : reverse_0
    assign c$karg_app_arg_2[(5 - 1 - i_7)*1+:1] = c$karg_app_arg_1[i_7*1+:1];
  end
  endgenerate
  // reverse end

  assign a2_3 = a1_6[19:8];

  assign b2_2 = a1_6[7:0];

  assign b3_2 = a2_3;

  assign a1_6 = {result_63,   result_62};

  assign result_38 = ((({(({((((b3_2)))),((b2_2))})),(($unsigned(result_61)))})) & oldMM[59:30]) == oldMM[29:0];

  assign a2_4 = a1_7[19:8];

  assign b2_3 = a1_7[7:0];

  assign b3_3 = a2_4;

  assign a1_7 = {result_63,   result_62};

  assign result_39 = ((({(({((((b3_3)))),((b2_3))})),(($unsigned(result_61)))})) & oldMM[59:30]) > oldMM[29:0];

  assign a2_5 = a1_8[19:8];

  assign b2_4 = a1_8[7:0];

  assign b3_4 = a2_5;

  assign a1_8 = {result_63,   result_62};

  assign result_40 = ((({(({((((b3_4)))),((b2_4))})),(($unsigned(result_61)))})) & oldMM[59:30]) < oldMM[29:0];

  wire [4:0] vec_3;
  wire  acc_3_0_9;
  wire  acc_0_17;
  wire  acc_0_18;
  wire  acc_0_19;
  wire  acc_0_20;
  wire  acc_1_0_6;
  wire  acc_1_1_7;
  wire  acc_2_0_8;
  wire  acc_0_21;
  assign c$case_alt_9 = acc_3_0_9;

  assign vec_3 = (karg_1);

  assign acc_0_17 = vec_3[4:4];

  assign acc_0_18 = vec_3[3:3];

  assign acc_0_19 = vec_3[2:2];

  assign acc_0_20 = vec_3[1:1];

  assign acc_0_21 = vec_3[0:0];

  assign acc_1_0_6 = acc_0_17 & acc_0_18;



  assign acc_1_1_7 = acc_0_19 & acc_0_20;



  assign acc_2_0_8 = acc_1_0_6 & acc_1_1_7;



  assign acc_3_0_9 = acc_2_0_8 & acc_0_21;





  wire [4:0] vec_4;
  wire  acc_3_0_13;
  wire  acc_0_23;
  wire  acc_0_24;
  wire  acc_0_25;
  wire  acc_0_26;
  wire  acc_1_0_10;
  wire  acc_1_1_11;
  wire  acc_2_0_12;
  wire  acc_0_27;
  assign c$case_alt_10 = acc_3_0_13;

  assign vec_4 = (karg_1);

  assign acc_0_23 = vec_4[4:4];

  assign acc_0_24 = vec_4[3:3];

  assign acc_0_25 = vec_4[2:2];

  assign acc_0_26 = vec_4[1:1];

  assign acc_0_27 = vec_4[0:0];

  assign acc_1_0_10 = acc_0_23 | acc_0_24;



  assign acc_1_1_11 = acc_0_25 | acc_0_26;



  assign acc_2_0_12 = acc_1_0_10 | acc_1_1_11;



  assign acc_3_0_13 = acc_2_0_12 | acc_0_27;





  assign result_41 = oldMM[60:60] ? c$case_alt_10 : c$case_alt_9;

  assign c$vec2_0 = {result_38,   result_39,
                     result_40,   1'b1,   1'b0};

  // zipWith start
  genvar i_8;
  generate
  for (i_8 = 0; i_8 < 5; i_8 = i_8 + 1) begin : zipWith_0
    wire  zipWith_in1_0;
    assign zipWith_in1_0 = c$karg_app_arg_2[i_8*1+:1];
    wire  zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2_0[i_8*1+:1];
    wire  c$n_0;
    wire  c$case_alt_49;
    wire  c$case_alt_50;
    wire  result_99;
    assign c$n_0 = result_99;

    assign c$case_alt_49 = zipWith_in1_0 ? zipWith_in2_0 : 1'b0;

    assign c$case_alt_50 = zipWith_in1_0 ? zipWith_in2_0 : 1'b1;

    assign result_99 = oldMM[60:60] ? c$case_alt_49 : c$case_alt_50;


    assign karg_1[i_8*1+:1] = c$n_0;
  end
  endgenerate
  // zipWith end

  assign c$bv_7 = oldMM[92:61];

  assign c$vec_1 = ((c$bv_7[0+:5]));

  // map begin
  genvar i_9;
  generate
  for (i_9=0; i_9 < 5; i_9 = i_9 + 1) begin : map_1
    wire [0:0] map_in_1;
    assign map_in_1 = c$vec_1[i_9*1+:1];
    wire  map_out_1;
    assign map_out_1 = map_in_1 == 1'b1;


    assign c$karg_app_arg_3[i_9*1+:1] = map_out_1;
  end
  endgenerate
  // map end

  // reverse begin
  genvar i_10;
  generate
  for (i_10 = 0; i_10 < 5; i_10 = i_10 + 1) begin : reverse_1
    assign c$karg_app_arg_4[(5 - 1 - i_10)*1+:1] = c$karg_app_arg_3[i_10*1+:1];
  end
  endgenerate
  // reverse end

  assign a2_6 = a1_9[19:8];

  assign b2_5 = a1_9[7:0];

  assign b3_5 = a2_6;

  assign a1_9 = {result_63,   result_62};

  assign result_42 = ((({(({((((b3_5)))),((b2_5))})),(($unsigned(result_61)))})) & oldMM[59:30]) == oldMM[29:0];

  assign a2_7 = a1_10[19:8];

  assign b2_6 = a1_10[7:0];

  assign b3_6 = a2_7;

  assign a1_10 = {result_63,   result_62};

  assign result_43 = ((({(({((((b3_6)))),((b2_6))})),(($unsigned(result_61)))})) & oldMM[59:30]) > oldMM[29:0];

  assign a2_8 = a1_11[19:8];

  assign b2_7 = a1_11[7:0];

  assign b3_7 = a2_8;

  assign a1_11 = {result_63,   result_62};

  assign result_44 = ((({(({((((b3_7)))),((b2_7))})),(($unsigned(result_61)))})) & oldMM[59:30]) < oldMM[29:0];

  wire [4:0] vec_5;
  wire  acc_3_0_17;
  wire  acc_0_29;
  wire  acc_0_30;
  wire  acc_0_31;
  wire  acc_0_32;
  wire  acc_1_0_14;
  wire  acc_1_1_15;
  wire  acc_2_0_16;
  wire  acc_0_33;
  assign c$case_alt_11 = acc_3_0_17;

  assign vec_5 = (karg_2);

  assign acc_0_29 = vec_5[4:4];

  assign acc_0_30 = vec_5[3:3];

  assign acc_0_31 = vec_5[2:2];

  assign acc_0_32 = vec_5[1:1];

  assign acc_0_33 = vec_5[0:0];

  assign acc_1_0_14 = acc_0_29 & acc_0_30;



  assign acc_1_1_15 = acc_0_31 & acc_0_32;



  assign acc_2_0_16 = acc_1_0_14 & acc_1_1_15;



  assign acc_3_0_17 = acc_2_0_16 & acc_0_33;





  wire [4:0] vec_6;
  wire  acc_3_0_21;
  wire  acc_0_35;
  wire  acc_0_36;
  wire  acc_0_37;
  wire  acc_0_38;
  wire  acc_1_0_18;
  wire  acc_1_1_19;
  wire  acc_2_0_20;
  wire  acc_0_39;
  assign c$case_alt_12 = acc_3_0_21;

  assign vec_6 = (karg_2);

  assign acc_0_35 = vec_6[4:4];

  assign acc_0_36 = vec_6[3:3];

  assign acc_0_37 = vec_6[2:2];

  assign acc_0_38 = vec_6[1:1];

  assign acc_0_39 = vec_6[0:0];

  assign acc_1_0_18 = acc_0_35 | acc_0_36;



  assign acc_1_1_19 = acc_0_37 | acc_0_38;



  assign acc_2_0_20 = acc_1_0_18 | acc_1_1_19;



  assign acc_3_0_21 = acc_2_0_20 | acc_0_39;





  assign result_45 = oldMM[60:60] ? c$case_alt_12 : c$case_alt_11;

  assign c$vec2_1 = {result_42,   result_43,
                     result_44,   1'b1,   1'b0};

  // zipWith start
  genvar i_11;
  generate
  for (i_11 = 0; i_11 < 5; i_11 = i_11 + 1) begin : zipWith_1
    wire  zipWith_in1_1;
    assign zipWith_in1_1 = c$karg_app_arg_4[i_11*1+:1];
    wire  zipWith_in2_1;
    assign zipWith_in2_1 = c$vec2_1[i_11*1+:1];
    wire  c$n_1;
    wire  c$case_alt_51;
    wire  c$case_alt_52;
    wire  result_100;
    assign c$n_1 = result_100;

    assign c$case_alt_51 = zipWith_in1_1 ? zipWith_in2_1 : 1'b0;

    assign c$case_alt_52 = zipWith_in1_1 ? zipWith_in2_1 : 1'b1;

    assign result_100 = oldMM[60:60] ? c$case_alt_51 : c$case_alt_52;


    assign karg_2[i_11*1+:1] = c$n_1;
  end
  endgenerate
  // zipWith end

  assign z_4 = 4'd1 + oldMM[96:93];

  assign result_46 = (z_4 > 5'd9) ? 4'd9 : (z_4[0+:4]);

  assign c$app_arg_10 = oldMM[102:102] ? result_46 : 4'd0;

  assign c$case_alt_13 = {1'b1,
                          oldMM[102:102] | result_45,   triggerPoint1_3,
                          (~ oldMM[102:102]) | (oldMM[96:93] < triggerPoint1_3),
                          c$app_arg_10,   triggerSelect1_3,
                          triggerOperation1_3,   triggerMask1_2,
                          triggerCompare1_2};

  assign triggerPoint1_3 = oldMM[101:98];

  assign triggerSelect1_3 = oldMM[92:61];

  assign triggerOperation1_3 = oldMM[60:60];

  assign triggerMask1_2 = oldMM[59:30];

  assign triggerCompare1_2 = oldMM[29:0];

  assign c$case_alt_14 = (bFwd[12:9] == 4'b1111) ? {{capture2_1,
                                                     triggered1_1,   triggerPoint1_4,
                                                     shouldSample1_1,   sampledAfterTrigger1_1,
                                                     bFwd[44:13],   triggerOperation1_4,
                                                     triggerMask1_3,   triggerCompare1_3},
                                                    1'd0} : result_34;

  assign result_47 = (bFwd[76:45] == 32'b00000000000000000000000000000100) ? c$case_alt_14 : result_34;

  assign capture2_1 = c$case_alt_13[103:103];

  assign triggered1_1 = c$case_alt_13[102:102];

  assign triggerPoint1_4 = c$case_alt_13[101:98];

  assign shouldSample1_1 = c$case_alt_13[97:97];

  assign sampledAfterTrigger1_1 = c$case_alt_13[96:93];

  assign triggerOperation1_4 = c$case_alt_13[60:60];

  assign triggerMask1_3 = c$case_alt_13[59:30];

  assign triggerCompare1_3 = c$case_alt_13[29:0];

  assign c$bv_8 = oldMM[92:61];

  assign c$vec_2 = ((c$bv_8[0+:5]));

  // map begin
  genvar i_12;
  generate
  for (i_12=0; i_12 < 5; i_12 = i_12 + 1) begin : map_2
    wire [0:0] map_in_2;
    assign map_in_2 = c$vec_2[i_12*1+:1];
    wire  map_out_2;
    assign map_out_2 = map_in_2 == 1'b1;


    assign c$karg_app_arg_5[i_12*1+:1] = map_out_2;
  end
  endgenerate
  // map end

  // reverse begin
  genvar i_13;
  generate
  for (i_13 = 0; i_13 < 5; i_13 = i_13 + 1) begin : reverse_2
    assign c$karg_app_arg_6[(5 - 1 - i_13)*1+:1] = c$karg_app_arg_5[i_13*1+:1];
  end
  endgenerate
  // reverse end

  assign a2_9 = a1_12[19:8];

  assign b2_8 = a1_12[7:0];

  assign b3_8 = a2_9;

  assign a1_12 = {result_63,   result_62};

  assign result_48 = ((({(({((((b3_8)))),((b2_8))})),(($unsigned(result_61)))})) & oldMM[59:30]) == oldMM[29:0];

  assign a2_10 = a1_13[19:8];

  assign b2_9 = a1_13[7:0];

  assign b3_9 = a2_10;

  assign a1_13 = {result_63,   result_62};

  assign result_49 = ((({(({((((b3_9)))),((b2_9))})),(($unsigned(result_61)))})) & oldMM[59:30]) > oldMM[29:0];

  assign a2_11 = a1_14[19:8];

  assign b2_10 = a1_14[7:0];

  assign b3_10 = a2_11;

  assign a1_14 = {result_63,   result_62};

  assign result_50 = ((({(({((((b3_10)))),((b2_10))})),(($unsigned(result_61)))})) & oldMM[59:30]) < oldMM[29:0];

  wire [4:0] vec_7;
  wire  acc_3_0_25;
  wire  acc_0_41;
  wire  acc_0_42;
  wire  acc_0_43;
  wire  acc_0_44;
  wire  acc_1_0_22;
  wire  acc_1_1_23;
  wire  acc_2_0_24;
  wire  acc_0_45;
  assign c$case_alt_15 = acc_3_0_25;

  assign vec_7 = (karg_3);

  assign acc_0_41 = vec_7[4:4];

  assign acc_0_42 = vec_7[3:3];

  assign acc_0_43 = vec_7[2:2];

  assign acc_0_44 = vec_7[1:1];

  assign acc_0_45 = vec_7[0:0];

  assign acc_1_0_22 = acc_0_41 & acc_0_42;



  assign acc_1_1_23 = acc_0_43 & acc_0_44;



  assign acc_2_0_24 = acc_1_0_22 & acc_1_1_23;



  assign acc_3_0_25 = acc_2_0_24 & acc_0_45;





  wire [4:0] vec_8;
  wire  acc_3_0_29;
  wire  acc_0_47;
  wire  acc_0_48;
  wire  acc_0_49;
  wire  acc_0_50;
  wire  acc_1_0_26;
  wire  acc_1_1_27;
  wire  acc_2_0_28;
  wire  acc_0_51;
  assign c$case_alt_16 = acc_3_0_29;

  assign vec_8 = (karg_3);

  assign acc_0_47 = vec_8[4:4];

  assign acc_0_48 = vec_8[3:3];

  assign acc_0_49 = vec_8[2:2];

  assign acc_0_50 = vec_8[1:1];

  assign acc_0_51 = vec_8[0:0];

  assign acc_1_0_26 = acc_0_47 | acc_0_48;



  assign acc_1_1_27 = acc_0_49 | acc_0_50;



  assign acc_2_0_28 = acc_1_0_26 | acc_1_1_27;



  assign acc_3_0_29 = acc_2_0_28 | acc_0_51;





  assign result_51 = oldMM[60:60] ? c$case_alt_16 : c$case_alt_15;

  assign c$vec2_2 = {result_48,   result_49,
                     result_50,   1'b1,   1'b0};

  // zipWith start
  genvar i_14;
  generate
  for (i_14 = 0; i_14 < 5; i_14 = i_14 + 1) begin : zipWith_2
    wire  zipWith_in1_2;
    assign zipWith_in1_2 = c$karg_app_arg_6[i_14*1+:1];
    wire  zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_2[i_14*1+:1];
    wire  c$n_2;
    wire  c$case_alt_53;
    wire  c$case_alt_54;
    wire  result_101;
    assign c$n_2 = result_101;

    assign c$case_alt_53 = zipWith_in1_2 ? zipWith_in2_2 : 1'b0;

    assign c$case_alt_54 = zipWith_in1_2 ? zipWith_in2_2 : 1'b1;

    assign result_101 = oldMM[60:60] ? c$case_alt_53 : c$case_alt_54;


    assign karg_3[i_14*1+:1] = c$n_2;
  end
  endgenerate
  // zipWith end

  assign c$ds_app_arg_3 = $unsigned(eta[0+:64]);

  assign x1_projection = ds;

  assign x1 = x1_projection;

  assign c$case_alt_selection_res = (x1 < 64'sd1) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(c$case_alt_selection_res)
      64'sd1 : c$case_alt_17 = 1'd0;
      default : c$case_alt_17 = 1'd1;
    endcase
  end

  assign result_52 = c$case_alt_17 ? 1'd1 : 1'd0;

  assign c$bv_9 = bFwd[44:13];

  assign eta = {63'b000000000000000000000000000000000000000000000000000000000000000,(c$bv_9[0+:1])};

  assign ds = $signed(c$ds_app_arg_3);

  assign z_5 = 4'd1 + oldMM[96:93];

  assign result_53 = (z_5 > 5'd9) ? 4'd9 : (z_5[0+:4]);

  assign c$app_arg_11 = oldMM[102:102] ? result_53 : 4'd0;

  assign c$case_alt_18 = {1'b1,
                          oldMM[102:102] | result_51,   triggerPoint1_5,
                          (~ oldMM[102:102]) | (oldMM[96:93] < triggerPoint1_5),
                          c$app_arg_11,   triggerSelect1_4,
                          triggerOperation1_5,   triggerMask1_4,
                          triggerCompare1_4};

  assign triggerPoint1_5 = oldMM[101:98];

  assign triggerSelect1_4 = oldMM[92:61];

  assign triggerOperation1_5 = oldMM[60:60];

  assign triggerMask1_4 = oldMM[59:30];

  assign triggerCompare1_4 = oldMM[29:0];

  assign c$case_alt_19 = (bFwd[12:9] == 4'b0001) ? {{capture2_2,
                                                     triggered1_2,   triggerPoint1_6,
                                                     shouldSample1_2,   sampledAfterTrigger1_2,
                                                     triggerSelect1_5,   result_52,
                                                     triggerMask1_5,   triggerCompare1_5},
                                                    1'd0} : result_47;

  assign result_54 = (bFwd[76:45] == 32'b00000000000000000000000000000011) ? c$case_alt_19 : result_47;

  assign capture2_2 = c$case_alt_18[103:103];

  assign triggered1_2 = c$case_alt_18[102:102];

  assign triggerPoint1_6 = c$case_alt_18[101:98];

  assign shouldSample1_2 = c$case_alt_18[97:97];

  assign sampledAfterTrigger1_2 = c$case_alt_18[96:93];

  assign triggerSelect1_5 = c$case_alt_18[92:61];

  assign triggerMask1_5 = c$case_alt_18[59:30];

  assign triggerCompare1_5 = c$case_alt_18[29:0];

  assign c$bv_10 = oldMM[92:61];

  assign c$vec_3 = ((c$bv_10[0+:5]));

  // map begin
  genvar i_15;
  generate
  for (i_15=0; i_15 < 5; i_15 = i_15 + 1) begin : map_3
    wire [0:0] map_in_3;
    assign map_in_3 = c$vec_3[i_15*1+:1];
    wire  map_out_3;
    assign map_out_3 = map_in_3 == 1'b1;


    assign c$karg_app_arg_7[i_15*1+:1] = map_out_3;
  end
  endgenerate
  // map end

  // reverse begin
  genvar i_16;
  generate
  for (i_16 = 0; i_16 < 5; i_16 = i_16 + 1) begin : reverse_3
    assign c$karg_app_arg_8[(5 - 1 - i_16)*1+:1] = c$karg_app_arg_7[i_16*1+:1];
  end
  endgenerate
  // reverse end

  assign a2_12 = a1_15[19:8];

  assign b2_11 = a1_15[7:0];

  assign b3_11 = a2_12;

  assign a1_15 = {result_63,   result_62};

  assign result_55 = ((({(({((((b3_11)))),((b2_11))})),(($unsigned(result_61)))})) & oldMM[59:30]) == oldMM[29:0];

  assign a2_13 = a1_16[19:8];

  assign b2_12 = a1_16[7:0];

  assign b3_12 = a2_13;

  assign a1_16 = {result_63,   result_62};

  assign result_56 = ((({(({((((b3_12)))),((b2_12))})),(($unsigned(result_61)))})) & oldMM[59:30]) > oldMM[29:0];

  assign a2_14 = a1_17[19:8];

  assign b2_13 = a1_17[7:0];

  assign b3_13 = a2_14;

  assign a1_17 = {result_63,   result_62};

  assign result_57 = ((({(({((((b3_13)))),((b2_13))})),(($unsigned(result_61)))})) & oldMM[59:30]) < oldMM[29:0];

  wire [4:0] vec_9;
  wire  acc_3_0_33;
  wire  acc_0_53;
  wire  acc_0_54;
  wire  acc_0_55;
  wire  acc_0_56;
  wire  acc_1_0_30;
  wire  acc_1_1_31;
  wire  acc_2_0_32;
  wire  acc_0_57;
  assign c$case_alt_20 = acc_3_0_33;

  assign vec_9 = (karg_4);

  assign acc_0_53 = vec_9[4:4];

  assign acc_0_54 = vec_9[3:3];

  assign acc_0_55 = vec_9[2:2];

  assign acc_0_56 = vec_9[1:1];

  assign acc_0_57 = vec_9[0:0];

  assign acc_1_0_30 = acc_0_53 & acc_0_54;



  assign acc_1_1_31 = acc_0_55 & acc_0_56;



  assign acc_2_0_32 = acc_1_0_30 & acc_1_1_31;



  assign acc_3_0_33 = acc_2_0_32 & acc_0_57;





  wire [4:0] vec_10;
  wire  acc_3_0_37;
  wire  acc_0_59;
  wire  acc_0_60;
  wire  acc_0_61;
  wire  acc_0_62;
  wire  acc_1_0_34;
  wire  acc_1_1_35;
  wire  acc_2_0_36;
  wire  acc_0_63;
  assign c$case_alt_21 = acc_3_0_37;

  assign vec_10 = (karg_4);

  assign acc_0_59 = vec_10[4:4];

  assign acc_0_60 = vec_10[3:3];

  assign acc_0_61 = vec_10[2:2];

  assign acc_0_62 = vec_10[1:1];

  assign acc_0_63 = vec_10[0:0];

  assign acc_1_0_34 = acc_0_59 | acc_0_60;



  assign acc_1_1_35 = acc_0_61 | acc_0_62;



  assign acc_2_0_36 = acc_1_0_34 | acc_1_1_35;



  assign acc_3_0_37 = acc_2_0_36 | acc_0_63;





  assign result_58 = oldMM[60:60] ? c$case_alt_21 : c$case_alt_20;

  assign c$vec2_3 = {result_55,   result_56,
                     result_57,   1'b1,   1'b0};

  // zipWith start
  genvar i_17;
  generate
  for (i_17 = 0; i_17 < 5; i_17 = i_17 + 1) begin : zipWith_3
    wire  zipWith_in1_3;
    assign zipWith_in1_3 = c$karg_app_arg_8[i_17*1+:1];
    wire  zipWith_in2_3;
    assign zipWith_in2_3 = c$vec2_3[i_17*1+:1];
    wire  c$n_3;
    wire  c$case_alt_55;
    wire  c$case_alt_56;
    wire  result_102;
    assign c$n_3 = result_102;

    assign c$case_alt_55 = zipWith_in1_3 ? zipWith_in2_3 : 1'b0;

    assign c$case_alt_56 = zipWith_in1_3 ? zipWith_in2_3 : 1'b1;

    assign result_102 = oldMM[60:60] ? c$case_alt_55 : c$case_alt_56;


    assign karg_4[i_17*1+:1] = c$n_3;
  end
  endgenerate
  // zipWith end

  assign z_6 = 4'd1 + oldMM[96:93];

  assign result_59 = (z_6 > 5'd9) ? 4'd9 : (z_6[0+:4]);

  assign c$app_arg_12 = oldMM[102:102] ? result_59 : 4'd0;

  assign c$case_alt_22 = {1'b1,
                          oldMM[102:102] | result_58,   triggerPoint1_7,
                          (~ oldMM[102:102]) | (oldMM[96:93] < triggerPoint1_7),
                          c$app_arg_12,   triggerSelect1_6,
                          triggerOperation1_6,   triggerMask1_6,
                          triggerCompare1_6};

  assign triggerPoint1_7 = oldMM[101:98];

  assign triggerSelect1_6 = oldMM[92:61];

  assign triggerOperation1_6 = oldMM[60:60];

  assign triggerMask1_6 = oldMM[59:30];

  assign triggerCompare1_6 = oldMM[29:0];

  assign c$bv_11 = bFwd[44:13];

  assign c$case_alt_23 = (bFwd[12:9] == 4'b1111) ? {{capture2_3,
                                                     triggered1_3,   (c$bv_11[0+:4]),
                                                     shouldSample1_3,   sampledAfterTrigger1_3,
                                                     triggerSelect1_7,   triggerOperation1_7,
                                                     triggerMask1_7,   triggerCompare1_7},
                                                    1'd0} : result_54;

  assign result_60 = (bFwd[76:45] == 32'b00000000000000000000000000000001) ? c$case_alt_23 : result_54;

  assign capture2_3 = c$case_alt_22[103:103];

  assign triggered1_3 = c$case_alt_22[102:102];

  assign shouldSample1_3 = c$case_alt_22[97:97];

  assign sampledAfterTrigger1_3 = c$case_alt_22[96:93];

  assign triggerSelect1_7 = c$case_alt_22[92:61];

  assign triggerOperation1_7 = c$case_alt_22[60:60];

  assign triggerMask1_7 = c$case_alt_22[59:30];

  assign triggerCompare1_7 = c$case_alt_22[29:0];

  assign c$app_arg_13 = 10'sd1 + result_61;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : result_61_register
    if ( ! BTN) begin
      result_61 <= 10'sd40;
    end else begin
      result_61 <= c$app_arg_13;
    end
  end
  // register end

  assign c$app_arg_14 = 8'd1 + result_62;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : result_62_register
    if ( ! BTN) begin
      result_62 <= 8'd20;
    end else begin
      result_62 <= c$app_arg_14;
    end
  end
  // register end

  assign c$app_arg_15 = 12'd1 + result_63;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : result_63_register
    if ( ! BTN) begin
      result_63 <= 12'd0;
    end else begin
      result_63 <= c$app_arg_15;
    end
  end
  // register end

  assign result_64 = {c$ds_case_scrut,
                      c$ds_app_arg_4};

  assign c$ds_app_arg_4 = st_0[5:5] ? {1'b1,{st_0[41:10],
                                             st_0[3:0],
                                             st_0[4:4]}} : {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$ds_app_arg_5 = fwdIn[20:20] ? c$ds_case_alt_3 : c$ds_case_alt_2;

  assign c$ds_case_alt_2 = c$ds_case_scrut ? {st_0[41:10],
                                              st_0[9:9],   st_0[8:6],   1'b0,
                                              c$ds_app_arg_6,   {1'b0,3'bxxx}} : st_0;

  assign c$ds_case_alt_3 = c$ds_case_scrut ? {(((c$ds_app_arg_9))),
                                              c$ds_app_arg_8,   3'd0,   nextFlush,
                                              c$ds_app_arg_6 | fwdIn[0:0],
                                              c$ds13_app_arg} : st_0;

  assign c$ds_case_scrut = c$ds_app_arg_7 | r2sAc_0;

  assign c$ds_app_arg_6 = c$ds_app_arg_7 & st_0[4:4];

  assign c$ds_app_arg_7 = ~ st_0[5:5];

  assign c$ds13_app_arg_selection_2 = fwdIn[3:1];

  assign c$ds13_app_arg = c$ds13_app_arg_selection_2[2:2] ? {1'b1,c$ds13_app_arg_0 + ({{(3-2) {1'b0}},a1_18})} : {1'b0,3'bxxx};

  assign a1_18 = fwdIn[2:1];

  assign c$bv_12 = st_0[9:9];

  assign c$ds13_app_arg_0 = ((({{(3-1) {1'b0}},st_0[9:9]})) << (64'sd1));

  assign c$ds_app_arg_8 = nextFlush ? 1'd0 : (st_0[9:9] + 1'd1);

  assign nextFlush = c$nextFlush_app_arg | (st_0[9:9] == 1'd1);

  assign c$nextFlush_app_arg_selection_2 = fwdIn[3:1];

  assign c$nextFlush_app_arg = c$nextFlush_app_arg_selection_2[2:2] ? 1'b1 : 1'b0;

  // map begin
  genvar i_18;
  generate
  for (i_18=0; i_18 < 2; i_18 = i_18 + 1) begin : map_4
    wire [15:0] map_in_4;
    assign map_in_4 = c$ds_app_arg_10[i_18*16+:16];
    wire [15:0] map_out_4;
    assign map_out_4 = map_in_4;


    assign c$ds_app_arg_9[i_18*16+:16] = map_out_4;
  end
  endgenerate
  // map end

  assign c$i_129 = st_0[9:9];

  assign c$vec_4 = {v1_0,   v1_1};

  // vector replace begin
  genvar i_19;
  generate
  for (i_19=0;i_19<2;i_19=i_19+1) begin : vector_replace
    assign c$ds_app_arg_10[(1-i_19)*16+:16] = ($unsigned({{(64-1) {1'b0}},c$i_129})) == i_19 ? ((c$ds_app_arg_11)) : c$vec_4[(1-i_19)*16+:16];
  end
  endgenerate
  // vector replace end

  assign c$vec_5 = fwdIn[19:4];

  // map begin
  genvar i_20;
  generate
  for (i_20=0; i_20 < 2; i_20 = i_20 + 1) begin : map_5
    wire [7:0] map_in_5;
    assign map_in_5 = c$vec_5[i_20*8+:8];
    wire [7:0] map_out_5;
    assign map_out_5 = map_in_5;


    assign c$ds_app_arg_11[i_20*8+:8] = map_out_5;
  end
  endgenerate
  // map end

  assign fwdIn = result_65[20:0];

  assign v1_0 = c$v1_case_scrut[31:16];

  assign v1_1 = c$v1_case_scrut[15:0];

  assign c$v1_case_scrut = (({st_0[41:34],   st_0[33:26],   st_0[25:18],   st_0[17:10]}));

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : st_0_register
    if ( ! BTN) begin
      st_0 <= {{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},   1'd0,   3'd0,
   1'b0,   1'b0,   {4 {1'bx}}};
    end else begin
      st_0 <= c$ds_app_arg_5;
    end
  end
  // register end

  assign bwd1 = result_64[38:38];

  assign b_2 = ~ (BTN);

  assign result_65 = b_2 ? {1'b0,
                            {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}} : {bwd1,
                                                                outwardsData};

  assign result_66 = {result_65[21:21],
                      result_64[37:0]};

  assign c$ds1_app_arg = outwardsData[20:20] ? 1'b1 : 1'b0;

  assign result_67 = {result_69[9:9],
                      result_68[16:0]};

  assign result_selection_49 = result_69[8:0];

  assign result_68 = result_selection_49[8:8] ? {c$ds_case_alt_7,
                                                 {c$ds_case_alt_5,   c$ds_case_alt_4}} : {s1_0,
                                                                                          {1'b0,
                                                                                           {1'b0,16'bxxxxxxxxxxxxxxxx}}};

  assign c$ds_case_alt_4 = o1[16:16] ? {1'b1,x_0} : {1'b0,16'bxxxxxxxxxxxxxxxx};

  assign x_0 = o1[15:0];

  assign c$ds_case_alt_5 = o1[16:16] ? c$ds_case_alt_6 : 1'b1;

  assign c$ds_case_alt_6 = c$ds1_app_arg ? 1'b1 : 1'b0;

  assign c$ds_case_alt_7 = o1[16:16] ? c$ds_case_alt_8 : \s' ;

  assign o1 = ds_0[16:0];

  assign c$ds_case_alt_8 = c$ds1_app_arg ? \s'  : s1_0;

  assign \s'  = ds_0[25:17];

  assign ds_0 = s1_0[8:8] ? {{1'b0,8'bxxxxxxxx},
                             {1'b1,{m1,   i1}}} : {{1'b1,i1},
                                                   {1'b0,16'bxxxxxxxxxxxxxxxx}};

  assign m1 = s1_0[7:0];

  assign i1 = result_69[7:0];

  assign bwd1_0 = result_68[17:17];

  assign b_3 = ~ (BTN);

  assign result_69 = b_3 ? {1'b0,
                            {1'b0,8'bxxxxxxxx}} : {bwd1_0,   s2rAc_0};

  assign s2rAc_0 = result_70[8:0];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : s1_0_register
    if ( ! BTN) begin
      s1_0 <= {1'b0,8'bxxxxxxxx};
    end else begin
      s1_0 <= result_68[26:18];
    end
  end
  // register end

  assign result_70 = {c$ds1_case_alt[9:9],
                      c$ds1_case_alt[8:0]};

  assign c$ds1_case_alt = lvl15_0 ? {{5'd0,
                                      5'd0,   6'd32},   {5'd0,
                                                         {1'b0,13'bxxxxxxxxxxxxx},   1'b0,
                                                         {1'b0,8'bxxxxxxxx}}} : {{rAddr1,   ds6[10:6],
                                                                                  ds8[5:0]},   {rAddr1,
                                                                                                c$ds1_app_arg_2,
                                                                                                c$ds1_app_arg_1,
                                                                                                c$ds1_app_arg_0}};

  assign c$ds1_app_arg_0 = c$ds8_case_scrut ? {1'b1,brRead1} : {1'b0,8'bxxxxxxxx};

  assign brRead1 = ds7[13:6];

  assign c$ds1_app_arg_1 = maybePush[8:8] ? 1'b1 : 1'b0;

  assign c$ds1_app_arg_2 = maybePush[8:8] ? {1'b1,{wAddr0,
                                                   push}} : {1'b0,13'bxxxxxxxxxxxxx};

  assign rAddr1 = ds8[10:6];

  assign ds8 = c$ds8_case_scrut ? c$ds8_case_alt : {rAddr0,
                                                    amtLeft1};

  assign c$ds8_case_alt = inpB ? {result_71,
                                  amtLeft1 + 6'd1} : {rAddr0,   amtLeft1};

  assign z_7 = rAddr0 + 5'd1;

  assign c$bv_13 = (z_7 - 6'd32);

  assign result_71 = (z_7 >= 6'd32) ? (c$bv_13[0+:5]) : (z_7[0+:5]);

  assign rAddr0 = ds_2[15:11];

  assign c$ds8_case_scrut = amtLeft2 < 6'd32;

  assign amtLeft2 = ds7[5:0];

  assign ds7 = maybePush[8:8] ? c$ds7_case_alt : {result_72,
                                                  amtLeft0};

  assign c$ds7_case_alt = (amtLeft0 == 6'd32) ? {push,
                                                 amtLeft1} : {result_72,   amtLeft0};

  assign push = maybePush[7:0];

  assign amtLeft1 = ds6[5:0];

  assign ds6 = maybePush[8:8] ? {result_74,
                                 amtLeft0 - 6'd1} : {wAddr0,   amtLeft0};

  assign maybePush = (amtLeft0 > 6'd0) ? c$maybePush_case_alt : {1'b0,8'bxxxxxxxx};

  assign c$maybePush_case_alt = s2rAc_1[8:8] ? {1'b1,a1_19} : {1'b0,8'bxxxxxxxx};

  assign a1_19 = s2rAc_1[7:0];

  assign inpB = result_67[17:17];

  assign lvl15_0 = ~ (BTN);

  assign c$ds_app_arg_selection_15 = c$ds1_case_alt[23:10];

  assign c$ds_app_arg_12 = c$ds_app_arg_selection_15[13:13] ? {wr == c$ds1_case_alt[28:24],
                                                               wrdata} : {1'b0,   {8 {1'bx}}};

  assign result_72 = ds_1[8:8] ? ds_1[7:0] : result_73;

  assign wr = c$ds1_case_alt[22:18];

  assign wrdata = c$ds1_case_alt[17:10];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : ds_1_register
    if ( ! BTN) begin
      ds_1 <= {1'b0,   {8 {1'bx}}};
    end else begin
      ds_1 <= c$ds_app_arg_12;
    end
  end
  // register end

  assign c$i_154 = c$ds1_case_alt[28:24];

  // blockRamU begin
  reg [7:0] result_73_RAM [0:32-1];


  always @(posedge CLK) begin : result_73_blockRam
    if (c$app_arg_16) begin
      result_73_RAM[($unsigned({{(64-5) {1'b0}},wa0_0}))] <= w0_0;
    end
    result_73 <= result_73_RAM[($unsigned({{(64-5) {1'b0}},c$i_154}))];
  end
  // blockRamU end

  assign w0_selection_3 = c$ds1_case_alt[23:10];

  assign w0_0 = w0_selection_3[13:13] ? a1_20[7:0] : 8'bxxxxxxxx;

  assign wa0_selection_3 = c$ds1_case_alt[23:10];

  assign wa0_0 = wa0_selection_3[13:13] ? a1_20[12:8] : ({5 {1'bx}});

  assign c$app_arg_selection_28 = c$ds1_case_alt[23:10];

  assign c$app_arg_16 = c$app_arg_selection_28[13:13] ? 1'b1 : 1'b0;

  assign a1_20 = c$ds1_case_alt[22:10];

  assign z_8 = wAddr0 + 5'd1;

  assign c$bv_14 = (z_8 - 6'd32);

  assign result_74 = (z_8 >= 6'd32) ? (c$bv_14[0+:5]) : (z_8[0+:5]);

  assign amtLeft0 = ds_2[5:0];

  assign wAddr0 = ds_2[10:6];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : ds_2_register
    if ( ! BTN) begin
      ds_2 <= {5'd0,   5'd0,   6'd32};
    end else begin
      ds_2 <= c$ds1_case_alt[44:29];
    end
  end
  // register end

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : c$ds_app_arg_13_register
    if ( ! BTN) begin
      c$ds_app_arg_13 <= {2'b00,11'bxxxxxxxxxxx};
    end else begin
      c$ds_app_arg_13 <= c$case_alt_24[33:21];
    end
  end
  // register end

  assign result_75 = {result_70[9:9],
                      result_66[37:0]};

  assign s2rAc_1 = result_81;

  assign r2sAc_0 = result_5[38:38];

  assign outwardsData = c$case_alt_24[20:0];

  assign c$case_alt_24 = bwdData ? c$case_alt_25 : {c$ds_app_arg_13,
                                                    {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign bwdData = result_66[38:38];

  always @(*) begin
    case(c$ds_app_arg_13[12:11])
      2'b00 : c$case_alt_25 = c$case_alt_28;
      2'b01 : c$case_alt_25 = c$case_alt_27;
      2'b10 : c$case_alt_25 = c$case_alt_26;
      default : c$case_alt_25 = c$case_alt_29;
    endcase
  end

  assign c$case_alt_26 = fwdData[16:16] ? c$case_alt_32 : {c$ds_app_arg_13,
                                                           {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign c$case_alt_27 = fwdData[16:16] ? c$case_alt_36 : {c$ds_app_arg_13,
                                                           {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign c$case_alt_28 = fwdData[16:16] ? c$case_alt_37 : {{2'b00,11'bxxxxxxxxxxx},
                                                           {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign c$case_alt_29 = fwdData[16:16] ? c$case_alt_30 : {c$ds_app_arg_13,
                                                           {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign c$case_alt_30 = ((n == 10'd0) & c$app_arg_17) ? {{2'b00,11'bxxxxxxxxxxx},
                                                          {1'b1,{word,   {1'b1,2'd2},
                                                                 1'b0}}} : c$case_alt_31;

  assign c$case_alt_31 = c$app_arg_17 ? {{2'b11,{n - 10'd1,
                                                 1'd1}},   {1'b1,{word,   {1'b0,2'bxx},
                                                                  1'b0}}} : {{2'b11,{n,   w - 1'd1}},
                                                                             {1'b1,{word,   {1'b0,2'bxx},   1'b0}}};

  assign c$app_arg_17 = w == 1'd0;

  assign w = c$ds_app_arg_13[0:0];

  assign n = c$ds_app_arg_13[10:1];

  assign c$case_alt_32 = (c$app_arg_18 & (result_78 == 10'd0)) ? {{2'b00,11'bxxxxxxxxxxx},
                                                                  {1'b1,{word,   {1'b1,2'd2},
                                                                         1'b0}}} : c$case_alt_33;

  assign c$case_alt_33 = c$app_arg_18 ? {{2'b11,{result_78,
                                                 1'd1}},   {1'b1,{word,   {1'b0,2'bxx},
                                                                  1'b0}}} : {{2'b10,n_0 - 1'd1,10'bxxxxxxxxxx},
                                                                             {1'b1,{word,   {1'b0,2'bxx},   1'b0}}};

  assign ds_3 = word[16-1 -: 8];

  assign ds1 = word[8-1 : 0];

  assign c$case_alt_34 = ((({2'b00,(ds1[8-1 -: 8])})) + (({2'b00,ds_3}))) + 10'd1;

  assign result_76 = (ds_3 == 8'b00000000) ? (({2'b00,(ds1[8-1 -: 8])})) : c$case_alt_34;

  assign result_77 = ((ds1[8-1 -: 8]) == 8'b00000000) ? (({2'b00,ds_3})) : result_76;

  assign result_78 = (ds_3 == 8'b00000000) ? c$case_alt_35 : result_77;

  assign c$case_alt_35 = ((ds1[8-1 -: 8]) == 8'b00000000) ? 10'd0 : result_77;

  assign c$app_arg_18 = n_0 == 1'd0;

  assign n_0 = c$ds_app_arg_13[10:10];

  assign c$case_alt_36 = (1'b1) ? {{2'b10,1'd1,10'bxxxxxxxxxx},
                                   {1'b1,{word,   {1'b0,2'bxx},
                                          1'b0}}} : {{2'b01,11'bxxxxxxxxxxx},
                                                     {1'b1,{word,   {1'b0,2'bxx},   1'b0}}};

  assign c$case_alt_37 = ((word[16-1 -: 8]) == 8'b01001110) ? result_79 : {{2'b00,11'bxxxxxxxxxxx},
                                                                           {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign result_79 = ((scrut[8-1 -: 8]) == 8'b01101111) ? {{2'b01,11'bxxxxxxxxxxx},
                                                           {1'b1,{word,   {1'b0,2'bxx},
                                                                  1'b0}}} : {{2'b00,11'bxxxxxxxxxxx},
                                                                             {1'b0,20'bxxxxxxxxxxxxxxxxxxxx}};

  assign scrut = word[8-1 : 0];

  assign word = fwdData[15:0];

  assign fwdData = result_67[16:0];

  assign c$b_app_arg_0 = hold[8:8] ? 1'b0 : 1'b1;

  assign result_80 = b_4 ? t : hold;

  assign result_81 = hold;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : hold_register
    if ( ! BTN) begin
      hold <= {1'b0,8'bxxxxxxxx};
    end else begin
      hold <= result_80;
    end
  end
  // register end

  assign incoming = bFwd_0[9:1];

  assign ack = result_75[38:38];

  assign b_4 = ack | c$b_app_arg_0;

  assign t = incoming[8:8] ? {1'b1,a1_21} : {1'b0,8'bxxxxxxxx};

  assign a1_21 = incoming[7:0];

  assign bFwd_0 = result_96[9:0];

  assign c$ds2_app_arg = transmit[8:8] ? {1'b1,a1_22} : {1'b0,8'bxxxxxxxx};

  assign result_selection_62 = ds2[16:2];

  assign c$bv_15 = (ds2[15:6]);

  assign result_82 = result_selection_62[14:14] ? {result_83[15:1],
                                                   { c$bv_15[0] ,
                                                    result_83[0:0]}} : c$case_alt_38;

  assign c$case_alt_38 = c$ds2_app_arg[8:8] ? {{1'b1,{({1'b1,d}),1'b0},4'd0},
                                               {1'b1,   1'b1}} : {{1'b0,14'bxxxxxxxxxxxxxx},
                                                                  {1'b1,   1'b0}};

  assign result_83 = (periodDone & (ds2[15:6] == 10'b0000000001)) ? c$ds4_case_alt : c$ds4_case_alt_0;

  assign c$ds4_case_alt = c$ds2_app_arg[8:8] ? {{1'b1,{({1'b1,d}),1'b0},4'd0},
                                                1'b1} : {{1'b0,14'bxxxxxxxxxxxxxx},   1'b0};

  assign c$ds4_case_alt_0 = periodDone ? {{1'b1,ds2[15:6] >> (64'sd1),4'd0},
                                          1'b0} : {{1'b1,ds2[15:6],ds2[5:2] + 4'd1},
                                                   1'b0};

  assign periodDone = ds2[5:2] == 4'd15;

  assign d = c$ds2_app_arg[7:0];

  assign c$b_app_arg_1 = uartTxNoBaudGen_lvl3_old ? 1'b0 : 1'b1;

  assign result_84 = (c$b_app_arg_1 & ack_0) ? ack_0 : 1'b0;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : uartTxNoBaudGen_lvl3_c$app_arg_register
    if ( ! BTN) begin
      uartTxNoBaudGen_lvl3_c$app_arg <= 1'b0;
    end else begin
      uartTxNoBaudGen_lvl3_c$app_arg <= result_84;
    end
  end
  // register end

  assign result_85 = {ds2[1:1],
                      uartTxNoBaudGen_lvl3_c$app_arg};

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : ds2_register
    if ( ! BTN) begin
      ds2 <= {{1'b0,14'bxxxxxxxxxxxxxx},   {1'b1,   1'b0}};
    end else if (result_95) begin
      ds2 <= result_82;
    end
  end
  // register end

  assign ack_0 = ds2[0:0];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : uartTxNoBaudGen_lvl3_old_register
    if ( ! BTN) begin
      uartTxNoBaudGen_lvl3_old <= 1'b0;
    end else begin
      uartTxNoBaudGen_lvl3_old <= ack_0;
    end
  end
  // register end

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : result_86_register
    if ( ! BTN) begin
      result_86 <= {1'b0,8'bxxxxxxxx};
    end else begin
      result_86 <= result_87;
    end
  end
  // register end

  assign result_87 = (c$b_app_arg_2 & s) ? fsmOut : {1'b0,8'bxxxxxxxx};

  assign c$b_app_arg_2 = old ? 1'b0 : 1'b1;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : old_register
    if ( ! BTN) begin
      old <= 1'b0;
    end else begin
      old <= s;
    end
  end
  // register end

  assign s = fsmOut[8:8] ? 1'b1 : 1'b0;

  assign fsmOut = result_88[8:0];

  always @(*) begin
    case(c$ds1_app_arg_3[13:12])
      2'b00 : result_88 = c$case_alt_39;
      2'b01 : result_88 = {result_90,
                           {1'b0,8'bxxxxxxxx}};
      2'b10 : result_88 = {result_89,
                           {1'b0,8'bxxxxxxxx}};
      default : result_88 = {c$app_arg_20,
                             c$app_arg_19};
    endcase
  end

  assign c$case_alt_39 = c$case_scrut_0 ? {{2'b00,12'bxxxxxxxxxxxx},
                                           {1'b0,8'bxxxxxxxx}} : c$case_alt_42;

  assign c$app_arg_19 = (middleSample & c$case_scrut_0) ? {1'b1,c$ds1_app_arg_3[7:0]} : {1'b0,8'bxxxxxxxx};

  assign c$app_arg_20 = middleSample ? {2'b00,12'bxxxxxxxxxxxx} : {2'b11,c$ds1_app_arg_3[11:8] + 4'd1,c$ds1_app_arg_3[7:0]};

  assign middleSample = c$ds1_app_arg_3[11:8] == 4'd8;

  assign c$bv_16 = (c$ds1_app_arg_3[7:0]);

  assign result_89 = (middleSample_0 & (((( c$bv_16[0] ))) == 1'b1)) ? {2'b11,c$app_arg_21,nextWord} : c$case_alt_40;

  assign c$case_alt_40 = middleSample_0 ? {2'b10,c$app_arg_21,nextWord} : {2'b10,c$app_arg_21,c$ds1_app_arg_3[7:0]};

  assign middleSample_0 = c$ds1_app_arg_3[11:8] == 4'd8;

  // replaceBit start
  always @(*) begin
    nextWord = ((c$ds1_app_arg_3[7:0] >> (64'sd1)));
    nextWord[64'sd7] = uartRxNoBaudGen_lvl4_c$ds1_app_arg;
  end
  // replaceBit end

  assign c$app_arg_21 = c$ds1_app_arg_3[11:8] + 4'd1;

  assign result_90 = (middleSample_1 & c$case_scrut_1) ? {2'b10,c$app_arg_22,8'b10000000} : c$case_alt_41;

  assign c$case_alt_41 = middleSample_1 ? {2'b00,12'bxxxxxxxxxxxx} : {2'b01,c$app_arg_22,8'bxxxxxxxx};

  assign middleSample_1 = c$ds1_app_arg_3[11:8] == 4'd8;

  assign c$app_arg_22 = c$ds1_app_arg_3[11:8] + 4'd1;

  assign c$case_alt_42 = c$case_scrut_1 ? {{2'b01,4'd1,8'bxxxxxxxx},
                                           {1'b0,8'bxxxxxxxx}} : {{2'b00,12'bxxxxxxxxxxxx},
                                                                  {1'b0,8'bxxxxxxxx}};

  assign c$case_scrut_0 = uartRxNoBaudGen_lvl4_c$ds1_app_arg == 1'b1;

  assign c$case_scrut_1 = uartRxNoBaudGen_lvl4_c$ds1_app_arg == 1'b0;

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : uartRxNoBaudGen_lvl4_c$ds1_app_arg_register
    if ( ! BTN) begin
      uartRxNoBaudGen_lvl4_c$ds1_app_arg <= 1'b1;
    end else begin
      uartRxNoBaudGen_lvl4_c$ds1_app_arg <= result_93;
    end
  end
  // register end

  assign ds_4 = $signed(c$ds_app_arg_14);

  assign result_91 = ds_4;

  assign c$ds_app_arg_14 = $unsigned({{(64-3) {1'b0}},result_92});

  assign c$vec_6 = ((({(((shiftReg))),1'b0})));

  // map begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 4; i_21 = i_21 + 1) begin : map_6
    wire  map_in_6;
    assign map_in_6 = c$vec_6[i_21*1+:1];
    wire [2:0] map_out_6;
    wire signed [63:0] c$app_arg_26;
    wire [2:0] result_103;
    wire [0:0] c$bv_17;
    assign map_out_6 = result_103;

    assign c$bv_17 = (map_in_6);

    assign c$app_arg_26 = $unsigned({{(64-1) {1'b0}},c$bv_17});

    assign result_103 = $unsigned(c$app_arg_26[0+:3]);


    assign c$ds_app_arg_15[i_21*3+:3] = map_out_6;
  end
  endgenerate
  // map end

  wire [11:0] vec_11;
  wire [2:0] acc_2_0_40;
  wire [2:0] acc_0_65;
  wire [2:0] acc_0_66;
  wire [2:0] acc_0_67;
  wire [2:0] acc_0_68;
  wire [2:0] acc_1_0_38;
  wire [2:0] acc_1_1_39;
  assign result_92 = acc_2_0_40;

  assign vec_11 = c$ds_app_arg_15;

  assign acc_0_65 = vec_11[11:9];

  assign acc_0_66 = vec_11[8:6];

  assign acc_0_67 = vec_11[5:3];

  assign acc_0_68 = vec_11[2:0];

  assign acc_1_0_38 = acc_0_65 + acc_0_66;



  assign acc_1_1_39 = acc_0_67 + acc_0_68;



  assign acc_2_0_40 = acc_1_0_38 + acc_1_1_39;





  assign \x#  = result_91;

  assign c$case_alt_selection_res_0 = \x#  & 64'sd2;

  always @(*) begin
    case(c$case_alt_selection_res_0)
      64'sd0 : c$case_alt_43 = 1'b0;
      default : c$case_alt_43 = 1'b1;
    endcase
  end

  assign result_93 = (c$case_alt_43);

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : shiftReg_register
    if ( ! BTN) begin
      shiftReg <= {1'b1,   1'b1,   1'b1};
    end else if (result_95) begin
      shiftReg <= c$shiftReg_app_arg;
    end
  end
  // register end

  assign c$shiftReg_app_arg_projection = ({uartRxNoBaudGen_lvl4_c$shiftReg_app_arg,shiftReg});

  assign c$shiftReg_app_arg = c$shiftReg_app_arg_projection[3:1];

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : uartRxNoBaudGen_lvl4_c$shiftReg_app_arg_register
    if ( ! BTN) begin
      uartRxNoBaudGen_lvl4_c$shiftReg_app_arg <= 1'b1;
    end else begin
      uartRxNoBaudGen_lvl4_c$shiftReg_app_arg <= uartRxNoBaudGen_lvl4_c$shiftReg_app_arg_0;
    end
  end
  // register end

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : uartRxNoBaudGen_lvl4_c$shiftReg_app_arg_0_register
    if ( ! BTN) begin
      uartRxNoBaudGen_lvl4_c$shiftReg_app_arg_0 <= 1'b1;
    end else begin
      uartRxNoBaudGen_lvl4_c$shiftReg_app_arg_0 <= PMOD1_6;
    end
  end
  // register end

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : c$ds1_app_arg_3_register
    if ( ! BTN) begin
      c$ds1_app_arg_3 <= {2'b00,12'bxxxxxxxxxxxx};
    end else if (result_95) begin
      c$ds1_app_arg_3 <= result_88[22:9];
    end
  end
  // register end

  assign result_94 = {result_86,
                      result_85[1:1],   result_85[0:0]};

  assign c$bv_18 = (cnt[0+:16]);

  // register begin
  always @(posedge CLK or  negedge  BTN) begin : cnt_register
    if ( ! BTN) begin
      cnt <= 17'd0;
    end else begin
      cnt <= (17'd210 + ({{(17-16) {1'b0}},(cnt[0+:16])}));
    end
  end
  // register end

  assign c$bv_19 = ((cnt));

  assign result_95 = ((( c$bv_19[17-1] ))) == 1'b1;

  assign result_96 = {result_94[0:0],
                      {result_94[10:2],   result_94[1:1]}};

  assign transmit = result_4[8:0];

  assign a1_22 = transmit[7:0];

  assign result = {{1'b0,   1'b0,   1'b0,   1'b0,
                    1'b0,   1'b0,   1'b0,   1'b0},   result_0};

  assign packedFields_0 = ({(({(c$packedFields_app_arg_2),(c$packedFields_app_arg_1)})),(({(c$packedFields_app_arg_0),(c$packedFields_app_arg)}))});

  assign g1 = PMOD3[3:3];

  assign g2 = PMOD3[2:2];

  assign g3 = PMOD3[1:1];

  assign g4 = PMOD3[0:0];

  assign c$packedFields_app_arg = g4 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_0 = g3 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_1 = g2 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_2 = g1 ? 1'b1 : 1'b0;

  assign result_97 = (packedFields_0);

  assign PMOD2 = result[8:1];

  assign PMOD1_5 = result[0:0];

  assign PMOD2_7 = PMOD2[7:7];

  assign PMOD2_6 = PMOD2[6:6];

  assign PMOD2_5 = PMOD2[5:5];

  assign PMOD2_4 = PMOD2[4:4];

  assign PMOD2_3 = PMOD2[3:3];

  assign PMOD2_2 = PMOD2[2:2];

  assign PMOD2_1 = PMOD2[1:1];

  assign PMOD2_0 = PMOD2[0:0];


endmodule

