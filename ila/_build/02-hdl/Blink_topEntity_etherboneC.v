/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.9.0. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module Blink_topEntity_etherboneC
    ( // Inputs
      input wire  c$ds2_bindCsr // clock
    , input wire  c$ds2_bindCsr_0 // reset
    , input wire [74:0] eta2

      // Outputs
    , output wire [115:0] result
    );
  wire [71:0] result_0;
  wire [1:0] c$ds1_app_arg;
  wire [0:0] c$ds1_app_arg_0;
  wire  continue;
  wire  first;
  wire  c$continue_case_alt;
  wire [68:0] transferIn;
  wire [69:0] fwd;
  wire signed [63:0] c$fwd_app_arg;
  wire [0:0] i;
  reg [1:0] ds2 = {1'd1,   1'b1};
  wire [0:0] c$ds1_case_alt;
  wire [0:0] v;
  wire [1:0] c$ds1_case_scrut;
  wire [3:0] c$ds1_app_arg_1;
  wire [38:0] result_1;
  reg [73:0] result_2;
  wire [73:0] c$ds_case_alt;
  wire [31:0] _data;
  wire [34:0] c$ds_app_arg;
  wire  nextAborted;
  wire  c$ds_case_alt_0;
  wire [73:0] c$ds_case_alt_1;
  wire [34:0] c$ds_app_arg_0;
  wire [34:0] c$ds_case_alt_2;
  wire  nextAborted_0;
  wire [63:0] ds6;
  reg [34:0] ds = {2'b00,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
  wire [73:0] c$ds_case_alt_3;
  wire [31:0] packedFields;
  wire [15:0] g1;
  wire [3:0] g2;
  wire  g3;
  wire  g4;
  wire  g5;
  wire  g6;
  wire [3:0] g7;
  wire [3:0] g8;
  wire [0:0] c$packedFields_app_arg;
  wire [0:0] c$packedFields_app_arg_0;
  wire [0:0] c$packedFields_app_arg_1;
  wire [31:0] result_3;
  wire [68:0] inPkt;
  wire [139:0] c$ds3_app_arg;
  wire [69:0] a1;
  wire  b1;
  wire [70:0] c$case_alt;
  wire [146:0] bFwd;
  wire [147:0] result_4;
  wire [36:0] bBwd;
  wire [69:0] a1_0;
  wire  b1_0;
  wire [70:0] c$case_alt_0;
  wire [139:0] c$scrut_case_alt;
  wire [139:0] s2rBc;
  wire [140:0] result_5;
  wire [140:0] result_6;
  wire [140:0] result_7;
  wire [139:0] c$ds_app_arg_1;
  wire  c$ds_app_arg_2;
  wire signed [63:0] c$ds_app_arg_3;
  wire [0:0] i_0;
  wire [1:0] c$ds_case_scrut;
  wire [5:0] ws;
  wire [3:0] c$ws_app_arg;
  wire [5:0] c$ws_app_arg_0;
  wire  result_8;
  wire  y;
  wire  result_9;
  wire  y_0;
  wire  result_10;
  wire  result_11;
  wire  result_12;
  wire  y_1;
  wire  result_13;
  wire  y_2;
  wire  result_14;
  wire  result_15;
  wire [68:0] x;
  wire [69:0] wild1;
  wire [1:0] c$ds7_app_arg;
  wire [70:0] ds5;
  wire [1:0] c$scrut1_case_alt;
  wire [1:0] aBwd;
  wire [70:0] result_16;
  wire [31:0] c$x_app_arg_app_arg;
  wire [31:0] header1;
  reg [34:0] ds1 = {1'b0,1'b0,{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},1'bx};
  wire [105:0] result_17;
  wire [105:0] c$ds_case_alt_4;
  wire [21:0] c$ds1_case_alt_0;
  wire [19:0] c$ds2_case_alt;
  wire [1:0] c$ds3_case_alt;
  wire [9:0] c$ds4_case_alt;
  wire [1:0] c$ds5_case_alt;
  wire [7:0] c$ds6_case_alt;
  wire [31:0] result_18;
  wire [31:0] ds_0;
  wire [21:0] front;
  wire [19:0] front_0;
  wire [1:0] back;
  wire [9:0] back_0;
  wire [1:0] front_1;
  wire [7:0] back_1;
  wire [0:0] front_2;
  wire [0:0] back_2;
  wire [0:0] front_3;
  wire [0:0] back_3;
  wire [3:0] c$ds_app_arg_4;
  wire  c$ds_app_arg_5;
  wire  c$ds_case_alt_5;
  wire [34:0] nextStOut;
  wire [34:0] c$nextStOut_case_alt;
  wire  nextAborted_1;
  wire [105:0] c$ds_case_alt_6;
  wire  r2sAc;
  wire  c$ds_app_arg_6;
  wire  c$ds_case_alt_7;
  wire [34:0] nextStOut_0;
  wire [34:0] c$nextStOut_case_alt_0;
  wire [34:0] result_19;
  wire [2:0] idx;
  wire [34:0] c$nextStOut_case_alt_1;
  wire  c$nextStOut_app_arg_0;
  wire  bwd1;
  wire  b;
  wire [38:0] result_20;
  wire [37:0] aFwd;
  wire [1:0] c$vec;
  wire [3:0] c$continue_case_alt_selection_1;
  wire [1:0] c$ds1_app_arg_res;
  wire [69:0] c$ds_case_alt_selection_1;
  wire [3:0] c$ds_case_alt_selection_4;
  wire [69:0] c$ds_case_alt_selection_7;
  wire [69:0] c$ds_case_alt_selection_11;
  wire [139:0] c$vec_0;
  wire [106:0] result_fun_arg;
  wire [69:0] c$vec_1;
  wire [139:0] c$vec_2;
  wire [1:0] c$vec1;
  wire [3:0] c$vec2;
  wire [1:0] c$vec_3;
  wire [0:0] c$vec_4;
  wire [70:0] ds5_fun_arg;
  wire [31:0] header1_projection;
  wire [37:0] c$ds_case_alt_selection_14;
  wire [3:0] c$nextStOut_case_alt_selection_3;
  wire [37:0] c$ds_case_alt_selection_19;
  wire [3:0] c$nextStOut_case_alt_selection_8;
  wire [63:0] c$nextStOut_case_alt_sel_alt_f_1;
  wire [63:0] result_sel_alt_f_13;
  wire [3:0] c$nextStOut_case_alt_selection_13;
  wire [63:0] c$nextStOut_case_alt_sel_alt_f_3;

  assign result = {result_16[70:70],
                   {result_1[37:0],   bFwd[76:0]}};

  assign result_0 = {c$ds1_app_arg,   fwd};

  assign c$vec = {1'b0,   1'b0};

  // vector replace begin
  genvar i_1;
  generate
  for (i_1=0;i_1<2;i_1=i_1+1) begin : vector_replace
    assign c$ds1_app_arg[(1-i_1)*1+:1] = c$fwd_app_arg == i_1 ? result_1[38:38] : c$vec[(1-i_1)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$ds1_app_arg_0 = continue ? c$ds1_case_alt : i;

  assign continue = fwd[69:69] ? (c$continue_case_alt & result_1[38:38]) : first;

  assign first = ds2[0:0];

  assign c$continue_case_alt_selection_1 = transferIn[36:33];

  assign c$continue_case_alt = c$continue_case_alt_selection_1[3:3] ? 1'b1 : 1'b0;

  assign transferIn = fwd[68:0];

  // index begin
  wire [69:0] vecArray [0:2-1];
  genvar i_2;
  generate
  for (i_2=0; i_2 < 2; i_2=i_2+1) begin : mk_array
    assign vecArray[(2-1)-i_2] = c$ds3_app_arg[i_2*70+:70];
  end
  endgenerate
  assign fwd = vecArray[c$fwd_app_arg];
  // index end

  assign c$fwd_app_arg = $unsigned({{(64-1) {1'b0}},i});

  assign i = ds2[1:1];

  // register begin
  always @(posedge c$ds2_bindCsr or  negedge  c$ds2_bindCsr_0) begin : ds2_register
    if ( ! c$ds2_bindCsr_0) begin
      ds2 <= {1'd1,   1'b1};
    end else begin
      ds2 <= {c$ds1_app_arg_0,   continue};
    end
  end
  // register end

  assign c$ds1_case_alt = c$ds1_case_scrut[1:1] ? v : 1'd1;

  assign v = c$ds1_case_scrut[0:0];

  wire [3:0] vec_0;
  wire [1:0] acc_1_0_0;
  wire [1:0] acc_0_2;
  wire [1:0] acc_0_3;
  assign c$ds1_case_scrut = acc_1_0_0;

  assign vec_0 = c$ds1_app_arg_1;

  assign acc_0_2 = vec_0[3:2];

  assign acc_0_3 = vec_0[1:0];

  wire [1:0] result_22;
  assign acc_1_0_0 = result_22;

  assign result_22 = acc_0_2[1:1] ? acc_0_2 : acc_0_3;





  // imap begin
  genvar i_4;
  generate
  for (i_4=0; i_4 < 2; i_4 = i_4 + 1) begin : imap
    wire [1-1:0] map_index;
    wire [0:0] map_out;

    assign map_index = 1'd1 - i_4[0+:1];
    assign map_out = map_index;


    assign c$ds1_app_arg_res[i_4*1+:1] = map_out;
  end
  endgenerate
  // imap end

  // zipWith start
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 2; i_5 = i_5 + 1) begin : zipWith
    wire [0:0] zipWith_in1;
    assign zipWith_in1 = c$ds1_app_arg_res[i_5*1+:1];
    wire [69:0] zipWith_in2;
    assign zipWith_in2 = c$ds3_app_arg[i_5*70+:70];
    wire [1:0] c$n;
    wire [1:0] result_23;
    assign c$n = result_23;

    assign result_23 = zipWith_in2[69:69] ? {1'b1,zipWith_in1} : {1'b0,1'bx};


    assign c$ds1_app_arg_1[i_5*2+:2] = c$n;
  end
  endgenerate
  // zipWith end

  assign result_1 = result_2[38:0];

  always @(*) begin
    case(ds[34:33])
      2'b00 : result_2 = c$ds_case_alt_3;
      2'b01 : result_2 = c$ds_case_alt_1;
      default : result_2 = c$ds_case_alt;
    endcase
  end

  assign c$ds_case_alt_selection_1 = result_0[69:0];

  assign c$ds_case_alt = c$ds_case_alt_selection_1[69:69] ? {c$ds_app_arg,
                                                             {bBwd[36:36],   {1'b1,{_data,   inPkt[36:33],
                                                                                    nextAborted}}}} : {ds,
                                                                                                       {bBwd[36:36],
                                                                                                        {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign _data = inPkt[68:37];

  assign c$ds_app_arg = (c$ds_case_alt_0 & bBwd[36:36]) ? {2'b00,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {2'b10,nextAborted,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign nextAborted = ds[32:32] | inPkt[0:0];

  assign c$ds_case_alt_selection_4 = inPkt[36:33];

  assign c$ds_case_alt_0 = c$ds_case_alt_selection_4[3:3] ? 1'b1 : 1'b0;

  assign c$ds_case_alt_selection_7 = result_0[69:0];

  assign c$ds_case_alt_1 = c$ds_case_alt_selection_7[69:69] ? {c$ds_app_arg_0,
                                                               {1'b0,   {1'b1,{ds6[63:32],   {1'b0,3'bxxx},
                                                                               nextAborted_0}}}} : {ds,   {bBwd[36:36],
                                                                                                           {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign c$ds_app_arg_0 = bBwd[36:36] ? c$ds_case_alt_2 : ds;

  assign c$ds_case_alt_2 = (1'b1) ? {2'b10,nextAborted_0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {2'b01,nextAborted_0,ds6[31:0]};

  assign nextAborted_0 = ds[32:32] | inPkt[0:0];

  assign ds6 = ({ds[31:0],({4 {(8'd0)}})});

  // register begin
  always @(posedge c$ds2_bindCsr or  negedge  c$ds2_bindCsr_0) begin : ds_register
    if ( ! c$ds2_bindCsr_0) begin
      ds <= {2'b00,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    end else begin
      ds <= result_2[73:39];
    end
  end
  // register end

  assign c$ds_case_alt_selection_11 = result_0[69:0];

  assign c$ds_case_alt_3 = c$ds_case_alt_selection_11[69:69] ? {{2'b01,1'b0,(result_3)},
                                                                {1'b0,
                                                                 {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}} : {{2'b00,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                                                                                                                       {bBwd[36:36],
                                                                                                                        {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign packedFields = ({(({(({(g1),(g2)})),(({((g3)),(c$packedFields_app_arg_1)}))})),(({(({(c$packedFields_app_arg_0),(c$packedFields_app_arg)})),(({(g7),(g8)}))}))});

  assign g1 = inPkt[32:17];

  assign g2 = inPkt[16:13];

  assign g3 = inPkt[12:12];

  assign g4 = inPkt[11:11];

  assign g5 = inPkt[10:10];

  assign g6 = inPkt[9:9];

  assign g7 = inPkt[8:5];

  assign g8 = inPkt[4:1];

  assign c$packedFields_app_arg = g6 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_0 = g5 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_1 = g4 ? 1'b1 : 1'b0;

  assign result_3 = (packedFields);

  assign inPkt = result_0[68:0];

  assign c$vec_0 = {c$case_alt[69:0],
                    ds5[69:0]};

  // map begin
  genvar i_6;
  generate
  for (i_6=0; i_6 < 2; i_6 = i_6 + 1) begin : map
    wire [69:0] map_in_0;
    assign map_in_0 = c$vec_0[i_6*70+:70];
    wire [69:0] map_out_0;
    assign map_out_0 = map_in_0;


    assign c$ds3_app_arg[i_6*70+:70] = map_out_0;
  end
  endgenerate
  // map end

  assign a1 = bFwd[146:77];

  assign b1 = c$scrut1_case_alt[2-1 -: 1];

  assign c$case_alt = {b1,   a1};

  assign bFwd = result_4[146:0];

  assign result_fun_arg = {c$case_alt_0[69:0],
                           {c$case_alt[70:70],   bBwd[35:0]}};

  Blink_topEntity_recordHandlerC Blink_topEntity_recordHandlerC_result_4
    ( .result (result_4)
    , .c$ds8_bindCsr (c$ds2_bindCsr)
    , .c$ds8_bindCsr_0 (c$ds2_bindCsr_0)
    , .eta2 (result_fun_arg) );

  assign bBwd = eta2[36:0];

  assign c$vec_1 = (c$scrut_case_alt[70-1 : 0]);

  assign a1_0 = c$vec_1[70-1 -: 70];

  assign b1_0 = result_4[147:147];

  assign c$case_alt_0 = {b1_0,   a1_0};

  // map begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 2; i_7 = i_7 + 1) begin : map_0
    wire [69:0] map_in_1;
    assign map_in_1 = s2rBc[i_7*70+:70];
    wire [69:0] map_out_1;
    assign map_out_1 = map_in_1;


    assign c$scrut_case_alt[i_7*70+:70] = map_out_1;
  end
  endgenerate
  // map end

  assign s2rBc = result_5[139:0];

  assign result_5 = {result_6[140:140],
                     result_6[139:0]};

  assign result_6 = wild1[69:69] ? result_7 : {1'b0,
                                               {2 {{1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}}};

  assign result_7 = c$ds_case_scrut[1:1] ? {c$ds_app_arg_2,
                                            c$ds_app_arg_1} : {1'b1,
                                                               {2 {{1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}}};

  assign c$vec_2 = {{1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                    {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}};

  // vector replace begin
  genvar i_8;
  generate
  for (i_8=0;i_8<2;i_8=i_8+1) begin : vector_replace_0
    assign c$ds_app_arg_1[(1-i_8)*70+:70] = c$ds_app_arg_3 == i_8 ? wild1 : c$vec_2[(1-i_8)*70+:70];
  end
  endgenerate
  // vector replace end

  // index begin
  wire  vecArray_0 [0:2-1];
  genvar i_9;
  generate
  for (i_9=0; i_9 < 2; i_9=i_9+1) begin : mk_array_0
    assign vecArray_0[(2-1)-i_9] = c$ds7_app_arg[i_9*1+:1];
  end
  endgenerate
  assign c$ds_app_arg_2 = vecArray_0[c$ds_app_arg_3];
  // index end

  assign c$ds_app_arg_3 = $unsigned({{(64-1) {1'b0}},i_0});

  assign i_0 = c$ds_case_scrut[0:0];

  assign c$ds_case_scrut = ws[6-1 -: 2];

  assign ws = {c$ws_app_arg,{1'b0,1'bx}};

  // imap begin
  genvar i_10;
  generate
  for (i_10=0; i_10 < 2; i_10 = i_10 + 1) begin : imap_0
    wire [1-1:0] map_index_0;
    wire [2:0] map_in_2;
    assign map_in_2 = c$ws_app_arg_0[i_10*3+:3];
    wire [1:0] map_out_2;

    assign map_index_0 = 1'd1 - i_10[0+:1];
    wire  x_0;
    wire [1:0] c$case_alt_2;
    assign map_out_2 = c$case_alt_2;

    assign x_0 = map_in_2[2:2];

    assign c$case_alt_2 = x_0 ? {1'b1,map_index_0} : map_in_2[1:0];


    assign c$ws_app_arg[i_10*2+:2] = map_out_2;
  end
  endgenerate
  // imap end

  assign c$vec1 = {result_15 & x[9:9],
                   result_11};

  assign c$vec2 = (ws[4-1 : 0]);

  // zipWith start
  genvar i_11;
  generate
  for (i_11 = 0; i_11 < 2; i_11 = i_11 + 1) begin : zipWith_0
    wire  zipWith_in1_0;
    assign zipWith_in1_0 = c$vec1[i_11*1+:1];
    wire [1:0] zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2[i_11*2+:2];
    wire [2:0] c$n_0;
    assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


    assign c$ws_app_arg_0[i_11*3+:3] = c$n_0;
  end
  endgenerate
  // zipWith end

  assign result_8 = y ? 1'b1 : 1'b0;

  assign y = (x[4:1] & 4'b0100) != 4'b0000;

  assign result_9 = y_0 ? result_8 : 1'b0;

  assign y_0 = (x[8:5] & 4'b0100) != 4'b0000;

  assign result_10 = (x[16:13] == 4'b0001) ? result_9 : 1'b0;

  assign result_11 = (x[32:17] == 16'b0100111001101111) ? result_10 : 1'b0;

  assign result_12 = y_1 ? 1'b1 : 1'b0;

  assign y_1 = (x[4:1] & 4'b0100) != 4'b0000;

  assign result_13 = y_2 ? result_12 : 1'b0;

  assign y_2 = (x[8:5] & 4'b0100) != 4'b0000;

  assign result_14 = (x[16:13] == 4'b0001) ? result_13 : 1'b0;

  assign result_15 = (x[32:17] == 16'b0100111001101111) ? result_14 : 1'b0;

  assign x = wild1[68:0];

  assign wild1 = result_16[69:0];

  assign c$vec_3 = {ds5[70:70],
                    c$case_alt_0[70:70]};

  // map begin
  genvar i_12;
  generate
  for (i_12=0; i_12 < 2; i_12 = i_12 + 1) begin : map_1
    wire  map_in_3;
    assign map_in_3 = c$vec_3[i_12*1+:1];
    wire  map_out_3;
    assign map_out_3 = map_in_3;


    assign c$ds7_app_arg[i_12*1+:1] = map_out_3;
  end
  endgenerate
  // map end

  assign c$vec_4 = (c$scrut1_case_alt[1-1 : 0]);

  assign ds5_fun_arg = {c$scrut_case_alt[140-1 -: 70],
                        c$vec_4[1-1 -: 1]};

  Blink_topEntity_probeHandlerC Blink_topEntity_probeHandlerC_ds5
    (.c$case_alt (ds5), .c$arg (ds5_fun_arg));

  // map begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 2; i_13 = i_13 + 1) begin : map_2
    wire  map_in_4;
    assign map_in_4 = aBwd[i_13*1+:1];
    wire  map_out_4;
    assign map_out_4 = map_in_4;


    assign c$scrut1_case_alt[i_13*1+:1] = map_out_4;
  end
  endgenerate
  // map end

  assign aBwd = result_0[71:70];

  assign result_16 = {result_20[38:38],
                      result_17[69:0]};

  // map begin
  genvar i_14;
  generate
  for (i_14=0; i_14 < 4; i_14 = i_14 + 1) begin : map_3
    wire [7:0] map_in_5;
    assign map_in_5 = header1[i_14*8+:8];
    wire [7:0] map_out_5;
    assign map_out_5 = map_in_5;


    assign c$x_app_arg_app_arg[i_14*8+:8] = map_out_5;
  end
  endgenerate
  // map end

  assign header1_projection = ds1[32:1];

  assign header1 = header1_projection;

  // register begin
  always @(posedge c$ds2_bindCsr or  negedge  c$ds2_bindCsr_0) begin : ds1_register
    if ( ! c$ds2_bindCsr_0) begin
      ds1 <= {1'b0,1'b0,{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},1'bx};
    end else begin
      ds1 <= result_17[105:71];
    end
  end
  // register end

  assign result_17 = ds1[34:34] ? c$ds_case_alt_4 : c$ds_case_alt_6;

  assign c$ds_case_alt_selection_14 = result_20[37:0];

  assign c$ds_case_alt_4 = c$ds_case_alt_selection_14[37:37] ? {nextStOut,
                                                                {c$ds_app_arg_5,   {1'b1,{result_20[36:5],
                                                                                          c$ds_app_arg_4,   result_18,
                                                                                          nextAborted_1}}}} : {ds1,
                                                                                                               {r2sAc,
                                                                                                                {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign c$ds1_case_alt_0 = front;

  assign c$ds2_case_alt = front_0;

  assign c$ds3_case_alt = back;

  assign c$ds4_case_alt = back_0;

  assign c$ds5_case_alt = front_1;

  assign c$ds6_case_alt = back_1;

  assign result_18 = {c$ds2_case_alt[19:4],
                      c$ds2_case_alt[3:0],   front_2,
                      back_2 == 1'b1,   front_3 == 1'b1,
                      back_3 == 1'b1,   c$ds6_case_alt[7:4],
                      c$ds6_case_alt[3:0]};

  assign ds_0 = ((c$x_app_arg_app_arg));

  assign front = ds_0[31:10];

  assign front_0 = c$ds1_case_alt_0[21:2];

  assign back = c$ds1_case_alt_0[1:0];

  assign back_0 = ds_0[9:0];

  assign front_1 = c$ds4_case_alt[9:8];

  assign back_1 = c$ds4_case_alt[7:0];

  assign front_2 = c$ds3_case_alt[1:1];

  assign back_2 = c$ds3_case_alt[0:0];

  assign front_3 = c$ds5_case_alt[1:1];

  assign back_3 = c$ds5_case_alt[0:0];

  assign c$ds_app_arg_4 = ds1[0:0] ? {1'b1,3'd0} : result_20[4:1];

  assign c$ds_app_arg_5 = nextStOut[34:34] ? c$ds_case_alt_5 : r2sAc;

  assign c$ds_case_alt_5 = nextStOut[0:0] ? 1'b0 : r2sAc;

  assign nextStOut = r2sAc ? c$nextStOut_case_alt : ds1;

  assign c$nextStOut_case_alt_selection_3 = result_20[4:1];

  assign c$nextStOut_case_alt = c$nextStOut_case_alt_selection_3[3:3] ? {1'b0,1'b0,{4 {8'bxxxxxxxx}},1'bx} : {1'b1,nextAborted_1,header1,1'b0};

  assign nextAborted_1 = ds1[33:33] | result_20[0:0];

  assign c$ds_case_alt_selection_19 = result_20[37:0];

  assign c$ds_case_alt_6 = c$ds_case_alt_selection_19[37:37] ? {nextStOut_0,
                                                                {c$ds_app_arg_6,
                                                                 {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}} : {ds1,
                                                                                                                                                       {r2sAc,
                                                                                                                                                        {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign r2sAc = result_5[140:140];

  assign c$ds_app_arg_6 = nextStOut_0[34:34] ? c$ds_case_alt_7 : 1'b1;

  assign c$ds_case_alt_7 = nextStOut_0[0:0] ? 1'b0 : 1'b1;

  assign nextStOut_0 = (1'b1) ? c$nextStOut_case_alt_0 : c$nextStOut_case_alt_1;

  assign c$nextStOut_case_alt_selection_8 = result_20[4:1];

  assign c$nextStOut_case_alt_sel_alt_f_1 = ({ds1[32:1],result_20[36:5]});

  assign c$nextStOut_case_alt_0 = c$nextStOut_case_alt_selection_8[3:3] ? result_19 : {1'b1,c$nextStOut_app_arg_0,c$nextStOut_case_alt_sel_alt_f_1[31:0],1'b0};

  assign result_sel_alt_f_13 = ({ds1[32:1],result_20[36:5]});

  assign result_19 = (idx != 3'd4) ? {1'b0,1'b0,{4 {8'bxxxxxxxx}},1'bx} : {1'b1,c$nextStOut_app_arg_0,result_sel_alt_f_13[31:0],1'b1};

  assign idx = result_20[3:1];

  assign c$nextStOut_case_alt_selection_13 = result_20[4:1];

  assign c$nextStOut_case_alt_sel_alt_f_3 = ({ds1[32:1],result_20[36:5]});

  assign c$nextStOut_case_alt_1 = c$nextStOut_case_alt_selection_13[3:3] ? {1'b0,1'b0,{4 {8'bxxxxxxxx}},1'bx} : {1'b0,c$nextStOut_app_arg_0,c$nextStOut_case_alt_sel_alt_f_3[31:0],1'bx};

  assign c$nextStOut_app_arg_0 = ds1[33:33] | result_20[0:0];

  assign bwd1 = result_17[70:70];

  assign b = ~ (c$ds2_bindCsr_0);

  assign result_20 = b ? {1'b0,
                          {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {bwd1,
                                                                               aFwd};

  assign aFwd = eta2[74:37];


endmodule

