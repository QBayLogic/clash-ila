/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.9.0. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module Blink_topEntity_recordBuilderC
    ( // Inputs
      input wire  c$ds3_bindCsr // clock
    , input wire  c$ds3_bindCsr_0 // reset
    , input wire [139:0] ds

      // Outputs
    , output wire [71:0] result
    );
  reg [10:0] c$ds3_app_arg = {3'b000,8'bxxxxxxxx};
  wire [35:0] c$wbPorts_case_alt;
  reg [66:0] c$ds4_app_arg = {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
  wire  c$ds4_app_arg_0;
  wire  c$ds4_app_arg_1;
  wire [34:0] a1;
  wire  psBwd;
  wire  wbBwd;
  wire [66:0] bypass;
  wire [35:0] cfg;
  wire [35:0] wbm;
  reg [81:0] result_0;
  wire [10:0] c$app_arg;
  wire [81:0] c$case_alt;
  wire [10:0] c$app_arg_0;
  wire [10:0] c$case_alt_0;
  wire [10:0] c$case_alt_1;
  wire [10:0] c$case_alt_2;
  wire [10:0] c$case_alt_3;
  wire [10:0] c$case_alt_4;
  wire  ipv1;
  wire [10:0] c$case_alt_5;
  wire  ipv1_0;
  wire  c$app_arg_1;
  wire [69:0] result_1;
  wire [69:0] c$psFwd_case_alt;
  wire [69:0] c$psFwd_case_alt_0;
  wire [3:0] c$app_arg_2;
  wire [69:0] c$case_alt_6;
  wire [32:0] ipv;
  wire  ipv2;
  wire [31:0] d;
  wire [81:0] c$case_alt_7;
  wire [10:0] c$app_arg_3;
  wire [10:0] c$case_alt_8;
  wire [10:0] c$case_alt_9;
  wire  c$app_arg_4;
  wire [69:0] psFwd;
  wire [81:0] c$case_alt_10;
  wire [10:0] c$app_arg_5;
  wire [10:0] c$case_alt_11;
  wire  c$app_arg_6;
  wire [69:0] result_2;
  wire [69:0] c$psFwd_case_alt_1;
  wire [69:0] c$psFwd_case_alt_2;
  wire [31:0] packedFields;
  wire [0:0] c$packedFields_app_arg;
  wire [0:0] c$packedFields_app_arg_0;
  wire [0:0] c$packedFields_app_arg_1;
  wire [31:0] result_3;
  wire [3:0] c$app_arg_7;
  wire [69:0] c$case_alt_12;
  wire  ipv2_0;
  wire [81:0] c$case_alt_13;
  wire [69:0] c$case_alt_14;
  wire [69:0] c$case_alt_15;
  wire [69:0] c$case_alt_16;
  wire [10:0] c$app_arg_8;
  wire [10:0] c$case_alt_17;
  wire [10:0] result_4;
  wire [7:0] \wCount' ;
  wire  c$case_alt_18;
  wire  c$case_alt_19;
  wire  c$case_alt_20;
  wire [81:0] c$case_alt_21;
  wire [10:0] c$app_arg_9;
  wire [10:0] c$case_alt_22;
  wire [10:0] c$case_alt_23;
  wire [81:0] c$case_alt_24;
  wire [81:0] c$case_alt_25;
  wire [10:0] c$app_arg_10;
  wire  c$app_arg_11;
  reg [69:0] psFwd_0;
  wire [10:0] \c$st'_case_alt ;
  wire [10:0] \c$st'_case_alt_0 ;
  wire [34:0] c$recordBuilderT_$j_arg2;
  wire [34:0] c$recordBuilderT_$j_arg10;
  reg [31:0] c$map_arg4;
  wire [31:0] base;
  wire [31:0] packedFields_0;
  wire  g6;
  wire  g7;
  wire [7:0] g10;
  wire [0:0] c$packedFields_app_arg_2;
  wire [0:0] c$packedFields_app_arg_3;
  wire [0:0] c$packedFields_app_arg_4;
  wire [31:0] result_5;
  wire [7:0] _byteEn;
  wire  _res1;
  wire  _cyc;
  wire  _res0;
  wire [35:0] wbPorts;
  wire [68:0] ds1;
  wire [133:0] result_6;
  wire [133:0] c$case_alt_26;
  wire [66:0] c$app_arg_12;
  wire [66:0] c$case_alt_27;
  wire [66:0] c$case_alt_28;
  wire [65:0] res3;
  wire [31:0] res;
  wire [32:0] c$res1_case_alt;
  wire [66:0] c$app_arg_13;
  wire [66:0] c$case_alt_29;
  wire [65:0] bs;
  wire [66:0] c$case_alt_30;
  wire [133:0] c$case_alt_31;
  wire [133:0] c$case_alt_32;
  wire [66:0] c$case_alt_33;
  wire [65:0] bp;
  wire [66:0] c$case_alt_34;
  wire [34:0] a1_0;
  wire [34:0] x;
  wire [66:0] c$case_alt_selection_1;
  wire [66:0] c$case_alt_selection_18;
  wire [32:0] c$case_alt_selection_27;
  wire [32:0] psFwd_selection_3;
  wire [66:0] c$case_alt_selection_30;
  wire [66:0] c$case_alt_selection_37;
  wire [66:0] c$case_alt_selection_58;
  wire [66:0] c$case_alt_selection_66;
  wire [66:0] c$case_alt_selection_73;
  wire [32:0] c$res1_case_alt_selection_1;
  wire [66:0] c$case_alt_selection_84;

  // register begin
  always @(posedge c$ds3_bindCsr or  negedge  c$ds3_bindCsr_0) begin : c$ds3_app_arg_register
    if ( ! c$ds3_bindCsr_0) begin
      c$ds3_app_arg <= {3'b000,8'bxxxxxxxx};
    end else begin
      c$ds3_app_arg <= result_0[81:71];
    end
  end
  // register end

  assign c$wbPorts_case_alt = cfg[35:35] ? {1'b1,a1} : {1'b0,35'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  // register begin
  always @(posedge c$ds3_bindCsr or  negedge  c$ds3_bindCsr_0) begin : c$ds4_app_arg_register
    if ( ! c$ds3_bindCsr_0) begin
      c$ds4_app_arg <= {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    end else begin
      c$ds4_app_arg <= result_6[133:67];
    end
  end
  // register end

  assign c$ds4_app_arg_0 = wbPorts[35:35] ? x[1:1] : 1'b0;

  assign c$ds4_app_arg_1 = wbPorts[35:35] ? 1'b1 : 1'b0;

  assign result = {{wbBwd,   wbBwd},
                   result_0[69:0]};

  assign a1 = cfg[34:0];

  assign psBwd = ds[0:0];

  assign wbBwd = result_0[70:70];

  assign bypass = ds[139:73];

  assign cfg = ds[72:37];

  assign wbm = ds[36:1];

  always @(*) begin
    case(c$ds3_app_arg[10:8])
      3'b000 : result_0 = c$case_alt_24;
      3'b001 : result_0 = c$case_alt_21;
      3'b010 : result_0 = c$case_alt_13;
      3'b011 : result_0 = c$case_alt_10;
      3'b100 : result_0 = c$case_alt_7;
      3'b101 : result_0 = c$case_alt;
      default : result_0 = {c$app_arg,   {1'b0,
                                          {1'b1,{{4 {8'b00000000}},   {1'b1,3'd0},
                                                 {16'b0100111001101111,   4'b0001,   1'b0,
                                                  1'b1,   1'b0,   1'b0,   4'b0100,   4'b0100},
                                                 1'b1}}}};
    endcase
  end

  assign c$app_arg = psBwd ? {3'b000,8'bxxxxxxxx} : {3'b110,8'bxxxxxxxx};

  assign c$case_alt_selection_1 = result_6[66:0];

  assign c$case_alt = c$case_alt_selection_1[66:66] ? {c$app_arg_0,
                                                       {psBwd,   result_1}} : ({82 {1'bx}});

  assign c$app_arg_0 = (c$app_arg_1 & psBwd) ? c$case_alt_0 : {3'b101,8'bxxxxxxxx};

  assign c$case_alt_0 = result_6[0:0] ? {3'b110,8'bxxxxxxxx} : c$case_alt_1;

  assign c$case_alt_1 = result_6[64:64] ? c$case_alt_2 : c$case_alt_3;

  assign c$case_alt_2 = cfg[35:35] ? c$case_alt_4 : {3'b101,8'bxxxxxxxx};

  assign c$case_alt_3 = wbm[35:35] ? c$case_alt_5 : {3'b101,8'bxxxxxxxx};

  assign c$case_alt_4 = ipv1 ? {3'b000,8'bxxxxxxxx} : {3'b101,8'bxxxxxxxx};

  assign ipv1 = cfg[1:1];

  assign c$case_alt_5 = ipv1_0 ? {3'b000,8'bxxxxxxxx} : {3'b101,8'bxxxxxxxx};

  assign ipv1_0 = wbm[1:1];

  assign c$app_arg_1 = result_1[69:69] ? 1'b1 : 1'b0;

  assign result_1 = result_6[64:64] ? c$psFwd_case_alt : c$psFwd_case_alt_0;

  assign c$psFwd_case_alt = cfg[35:35] ? c$case_alt_6 : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$psFwd_case_alt_0 = wbm[35:35] ? c$case_alt_6 : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$app_arg_2 = ipv2 ? {1'b1,3'd4} : {1'b0,3'bxxx};

  assign c$case_alt_6 = ipv[32:32] ? {1'b1,{((d)),
                                            c$app_arg_2,   {16'b0100111001101111,
                                                            4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                            4'b0100,   4'b0100},   1'b0}} : ({70 {1'bx}});

  assign ipv = c$recordBuilderT_$j_arg2[34:2];

  assign ipv2 = c$recordBuilderT_$j_arg2[0:0];

  assign d = ipv[31:0];

  assign c$case_alt_selection_18 = result_6[66:0];

  assign c$case_alt_7 = c$case_alt_selection_18[66:66] ? {c$app_arg_3,
                                                          {1'b0,   psFwd}} : ({82 {1'bx}});

  assign c$app_arg_3 = (c$app_arg_4 & psBwd) ? c$case_alt_8 : {3'b100,8'bxxxxxxxx};

  assign c$case_alt_8 = result_6[0:0] ? {3'b110,8'bxxxxxxxx} : c$case_alt_9;

  assign c$case_alt_selection_27 = result_6[33:1];

  assign c$case_alt_9 = c$case_alt_selection_27[32:32] ? {3'b101,8'bxxxxxxxx} : {3'b100,8'bxxxxxxxx};

  assign c$app_arg_4 = psFwd[69:69] ? 1'b1 : 1'b0;

  assign psFwd_selection_3 = result_6[33:1];

  assign psFwd = psFwd_selection_3[32:32] ? {1'b1,{c$map_arg4,
                                                   {1'b0,3'bxxx},   {16'b0100111001101111,
                                                                     4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                                     4'b0100,   4'b0100},
                                                   1'b0}} : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$case_alt_selection_30 = result_6[66:0];

  assign c$case_alt_10 = c$case_alt_selection_30[66:66] ? {c$app_arg_5,
                                                           {psBwd,   result_2}} : ({82 {1'bx}});

  assign c$app_arg_5 = (c$app_arg_6 & psBwd) ? c$case_alt_11 : {3'b011,8'bxxxxxxxx};

  assign c$case_alt_11 = result_6[0:0] ? {3'b110,8'bxxxxxxxx} : \c$st'_case_alt_0 ;

  assign c$app_arg_6 = result_2[69:69] ? 1'b1 : 1'b0;

  assign result_2 = result_6[60:60] ? c$psFwd_case_alt_1 : c$psFwd_case_alt_2;

  assign c$psFwd_case_alt_1 = cfg[35:35] ? c$case_alt_12 : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$psFwd_case_alt_2 = wbm[35:35] ? c$case_alt_12 : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign packedFields = ({(({(2'b00),(({(1'b0),(({((_res0)),(c$packedFields_app_arg_1)}))}))})),(({(({(c$packedFields_app_arg_0),(({(c$packedFields_app_arg),((_res1))}))})),(({(_byteEn),(({((result_6[41:34])),(8'b00000000)}))}))}))});

  assign c$packedFields_app_arg = result_6[63:63] ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_0 = result_6[65:65] ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_1 = _cyc ? 1'b1 : 1'b0;

  assign result_3 = (packedFields);

  assign c$app_arg_7 = ipv2_0 ? {1'b1,3'd4} : {1'b0,3'bxxx};

  assign c$case_alt_12 = {1'b1,{((result_3)),
                                c$app_arg_7,   {16'b0100111001101111,
                                                4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                4'b0100,   4'b0100},   1'b0}};

  assign ipv2_0 = c$recordBuilderT_$j_arg10[0:0];

  assign c$case_alt_selection_37 = result_6[66:0];

  assign c$case_alt_13 = c$case_alt_selection_37[66:66] ? {c$app_arg_8,
                                                           {psBwd,   c$case_alt_14}} : ({82 {1'bx}});

  assign c$case_alt_14 = result_6[60:60] ? c$case_alt_15 : c$case_alt_16;

  assign c$case_alt_15 = cfg[35:35] ? {1'b1,{{4 {8'b00000000}},
                                             {1'b0,3'bxxx},   {16'b0100111001101111,
                                                               4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                               4'b0100,   4'b0100},
                                             1'b0}} : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$case_alt_16 = wbm[35:35] ? {1'b1,{{4 {8'b00000000}},
                                             {1'b0,3'bxxx},   {16'b0100111001101111,
                                                               4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                               4'b0100,   4'b0100},
                                             1'b0}} : {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$app_arg_8 = (c$case_alt_18 & psBwd) ? c$case_alt_17 : c$ds3_app_arg;

  assign c$case_alt_17 = result_6[0:0] ? {3'b110,8'bxxxxxxxx} : result_4;

  assign result_4 = (\wCount'  > 8'd0) ? {3'b010,\wCount' } : {3'b011,8'bxxxxxxxx};

  assign \wCount'  = c$ds3_app_arg[7:0] - 8'd1;

  assign c$case_alt_18 = result_6[60:60] ? c$case_alt_19 : c$case_alt_20;

  assign c$case_alt_19 = cfg[35:35] ? 1'b1 : 1'b0;

  assign c$case_alt_20 = wbm[35:35] ? 1'b1 : 1'b0;

  assign c$case_alt_selection_58 = result_6[66:0];

  assign c$case_alt_21 = c$case_alt_selection_58[66:66] ? {c$app_arg_9,
                                                           {1'b0,   {1'b1,{{4 {8'b00000000}},
                                                                           {1'b0,3'bxxx},   {16'b0100111001101111,
                                                                                             4'b0001,   1'b0,   1'b1,
                                                                                             1'b0,   1'b0,   4'b0100,
                                                                                             4'b0100},
                                                                           1'b0}}}} : ({82 {1'bx}});

  assign c$app_arg_9 = psBwd ? c$case_alt_22 : {3'b001,8'bxxxxxxxx};

  assign c$case_alt_22 = result_6[0:0] ? {3'b110,8'bxxxxxxxx} : c$case_alt_23;

  assign c$case_alt_23 = (result_6[49:42] == 8'd1) ? {3'b011,8'bxxxxxxxx} : {3'b010,result_6[49:42] - 8'd1};

  assign c$case_alt_selection_66 = result_6[66:0];

  assign c$case_alt_24 = c$case_alt_selection_66[66:66] ? c$case_alt_25 : {{3'b000,8'bxxxxxxxx},
                                                                           {1'b1,
                                                                            {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign c$case_alt_25 = result_6[0:0] ? {{3'b000,8'bxxxxxxxx},
                                          {1'b1,
                                           {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}} : {c$app_arg_10,
                                                                                                                                 {1'b0,
                                                                                                                                  psFwd_0}};

  assign c$app_arg_10 = (c$app_arg_11 & psBwd) ? \c$st'_case_alt  : {3'b000,8'bxxxxxxxx};

  assign c$app_arg_11 = psFwd_0[69:69] ? 1'b1 : 1'b0;

  always @(*) begin
    case(\c$st'_case_alt [10:8])
      3'b000 : psFwd_0 = {1'b0,69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
      3'b001 : psFwd_0 = {1'b1,{{4 {8'b00000000}},
                                {1'b0,3'bxxx},   {16'b0100111001101111,
                                                  4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                  4'b0100,   4'b0100},   1'b0}};
      3'b100 : psFwd_0 = {1'b1,{c$map_arg4,
                                {1'b0,3'bxxx},   {16'b0100111001101111,
                                                  4'b0001,   1'b0,   1'b1,   1'b0,   1'b0,
                                                  4'b0100,   4'b0100},   1'b0}};
      default : psFwd_0 = {70 {1'bx}};
    endcase
  end

  assign \c$st'_case_alt  = (result_6[49:42] > 8'd0) ? {3'b001,8'bxxxxxxxx} : \c$st'_case_alt_0 ;

  assign \c$st'_case_alt_0  = (result_6[41:34] > 8'd0) ? {3'b100,8'bxxxxxxxx} : {3'b000,8'bxxxxxxxx};

  assign c$recordBuilderT_$j_arg2 = result_6[64:64] ? cfg[34:0] : wbm[34:0];

  assign c$recordBuilderT_$j_arg10 = result_6[60:60] ? cfg[34:0] : wbm[34:0];

  always @(*) begin
    case(c$ds3_app_arg[10:8])
      3'b000 : c$map_arg4 = (result_5);
      default : c$map_arg4 = ((base));
    endcase
  end

  assign base = result_6[32:1];

  assign packedFields_0 = ({(({(2'b00),(({(1'b0),(({((_res0)),(c$packedFields_app_arg_4)}))}))})),(({(({(c$packedFields_app_arg_3),(({(c$packedFields_app_arg_2),((_res1))}))})),(({(_byteEn),(({((g10)),(8'b00000000)}))}))}))});

  assign g6 = result_6[65:65];

  assign g7 = result_6[63:63];

  assign g10 = result_6[41:34];

  assign c$packedFields_app_arg_2 = g7 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_3 = g6 ? 1'b1 : 1'b0;

  assign c$packedFields_app_arg_4 = _cyc ? 1'b1 : 1'b0;

  assign result_5 = (packedFields_0);

  assign _byteEn = result_6[57:50];

  assign _res1 = result_6[58:58];

  assign _cyc = result_6[61:61];

  assign _res0 = result_6[62:62];

  assign wbPorts = wbm[35:35] ? {1'b1,a1_0} : c$wbPorts_case_alt;

  assign ds1 = {bypass,   c$ds4_app_arg_0,
                c$ds4_app_arg_1 & wbBwd};

  assign result_6 = c$ds4_app_arg[66:66] ? c$case_alt_26 : c$case_alt_31;

  assign c$case_alt_selection_73 = ds1[68:2];

  assign c$case_alt_26 = c$case_alt_selection_73[66:66] ? {c$app_arg_12,
                                                           {1'b1,res3}} : {c$app_arg_13,   c$ds4_app_arg};

  assign c$app_arg_12 = ds1[0:0] ? c$case_alt_27 : {1'b1,res3};

  assign c$case_alt_27 = bp[0:0] ? {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$case_alt_28;

  assign c$case_alt_28 = ds1[1:1] ? {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {1'b1,res3};

  assign res3 = {res,   c$res1_case_alt,
                 bp[0:0]};

  assign res = bs[65:34];

  assign c$res1_case_alt_selection_1 = bs[33:1];

  assign c$res1_case_alt = c$res1_case_alt_selection_1[32:32] ? bs[33:1] : bp[33:1];

  assign c$app_arg_13 = ds1[0:0] ? c$case_alt_29 : c$ds4_app_arg;

  assign c$case_alt_29 = bs[0:0] ? {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$case_alt_30;

  assign bs = c$ds4_app_arg[65:0];

  assign c$case_alt_30 = ds1[1:1] ? {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$ds4_app_arg;

  assign c$case_alt_selection_84 = ds1[68:2];

  assign c$case_alt_31 = c$case_alt_selection_84[66:66] ? {c$case_alt_33,
                                                           ds1[68:2]} : c$case_alt_32;

  assign c$case_alt_32 = ds1[1:1] ? {{67 {1'bx}},
                                     {67 {1'bx}}} : {{1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},
                                                     {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}};

  assign c$case_alt_33 = bp[0:0] ? {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$case_alt_34;

  assign bp = ds1[67:2];

  assign c$case_alt_34 = (ds1[1:1] & ds1[0:0]) ? {1'b0,66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : ds1[68:2];

  assign a1_0 = wbm[34:0];

  assign x = wbPorts[34:0];


endmodule

