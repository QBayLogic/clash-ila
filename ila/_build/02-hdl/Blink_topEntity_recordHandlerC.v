/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.9.0. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module Blink_topEntity_recordHandlerC
    ( // Inputs
      input wire  c$ds8_bindCsr // clock
    , input wire  c$ds8_bindCsr_0 // reset
    , input wire [106:0] eta2

      // Outputs
    , output wire [147:0] result
    );
  wire [149:0] c$scrut_case_alt;
  wire [149:0] bFwd;
  wire [1:0] c$ds1_app_arg;
  wire [1:0] c$ds1_app_arg_0;
  wire [149:0] c$ds1_app_arg_1;
  wire [152:0] result_0;
  wire  bwd1;
  wire  b;
  wire [75:0] result_1;
  wire [150:0] result_2;
  reg [1:0] acked = {1'b0,   1'b0};
  wire [74:0] wild2;
  wire [1:0] acked1;
  wire  ack;
  wire [1:0] c$ds6_app_arg;
  wire [74:0] a5;
  wire [66:0] a4;
  wire [141:0] bFwd_0;
  wire [142:0] result_3;
  wire  a6;
  wire  a5_0;
  wire [1:0] aBwd;
  wire [71:0] result_4;
  reg [63:0] c$errorReg_case_alt;
  wire [63:0] c$errorReg_app_arg;
  wire [63:0] result_5;
  wire  c$app_arg;
  wire  c$app_arg_0;
  wire [73:0] a1;
  wire [191:0] c$ds1_app_arg_2;
  wire [31:0] c$app_arg_app_arg;
  wire [33:0] c$case_alt;
  wire [33:0] c$case_alt_0;
  wire [33:0] c$case_alt_1;
  wire [33:0] result_6;
  wire [35:0] c$case_alt_2;
  wire [32:0] a1_0;
  wire [73:0] a2;
  wire [35:0] result_7;
  wire [36:0] c$case_alt_3;
  wire [74:0] iFwd;
  wire [1:0] errBit;
  reg [63:0] errorReg = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg [63:0] packetCounter = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  wire  b_0;
  wire [114:0] bFwd_1;
  wire [115:0] result_8;
  wire  aBwd_0;
  wire [36:0] bBwd;
  wire [71:0] result_9;
  wire [49:0] result_10;
  wire [49:0] c$ds_case_alt;
  wire [9:0] c$ds_app_arg;
  wire [9:0] result_11;
  wire [9:0] rCount;
  wire [7:0] c$rCount_app_arg;
  wire [9:0] result_12;
  wire [9:0] wCount;
  wire [7:0] c$wCount_app_arg;
  wire [49:0] c$ds_case_alt_0;
  wire  _abort;
  wire [31:0] _data;
  wire  c$ds_app_arg_0;
  wire [3:0] c$ds_app_arg_1;
  wire [9:0] c$ds_app_arg_2;
  wire [71:0] result_13;
  wire [31:0] c$hdr_app_arg_app_arg;
  wire [31:0] header1;
  reg [34:0] ds1 = {1'b0,1'b0,{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},1'bx};
  wire [106:0] result_14;
  wire [106:0] c$ds_case_alt_1;
  wire [4:0] c$ds1_case_alt;
  wire [1:0] c$ds2_case_alt;
  wire [2:0] c$ds3_case_alt;
  wire [1:0] c$ds4_case_alt;
  wire [26:0] c$ds5_case_alt;
  wire [2:0] c$ds6_case_alt;
  wire [1:0] c$ds7_case_alt;
  wire [23:0] c$ds8_case_alt;
  wire [15:0] c$ds9_case_alt;
  wire [31:0] result_15;
  wire [31:0] ds;
  wire [4:0] front;
  wire [1:0] front_0;
  wire [2:0] back;
  wire [1:0] back_0;
  wire [26:0] back_1;
  wire [2:0] front_1;
  wire [1:0] back_2;
  wire [23:0] back_3;
  wire [15:0] back_4;
  wire [0:0] front_2;
  wire [0:0] back_5;
  wire [0:0] front_3;
  wire [0:0] front_4;
  wire [0:0] back_6;
  wire [0:0] front_5;
  wire [0:0] front_6;
  wire [0:0] back_7;
  wire [7:0] front_7;
  wire [7:0] back_8;
  wire [31:0] result_16;
  wire [3:0] c$ds_app_arg_3;
  wire  c$ds_app_arg_4;
  wire  c$ds_case_alt_2;
  wire [34:0] nextStOut;
  wire [34:0] c$nextStOut_case_alt;
  wire  nextAborted;
  wire [106:0] c$ds_case_alt_3;
  wire  c$ds_app_arg_5;
  wire  c$ds_case_alt_4;
  wire [34:0] nextStOut_0;
  wire [34:0] c$nextStOut_case_alt_0;
  wire [34:0] result_17;
  wire [2:0] idx;
  wire [34:0] c$nextStOut_case_alt_1;
  wire  c$nextStOut_app_arg_0;
  wire  bwd1_0;
  wire  b_1;
  wire [39:0] result_18;
  wire [38:0] s2rAc;
  wire  r2sAc;
  wire [9:0] \c$left'_case_alt ;
  wire [68:0] ps;
  reg [9:0] ds1_0 = 10'd0;
  wire [69:0] aFwd;
  wire [1:0] c$vec2;
  wire [1:0] c$vec;
  wire [71:0] result_fun_arg;
  wire [139:0] result_fun_arg_0;
  wire [191:0] c$vec_1;
  wire [31:0] c$bv;
  wire [191:0] c$vecFlat;
  wire [32:0] c$case_alt_selection_2;
  wire [74:0] c$vec_2;
  wire [111:0] result_fun_arg_1;
  wire [3:0] c$ds_app_arg_selection_3;
  wire [31:0] header1_projection;
  wire [38:0] c$ds_case_alt_selection_3;
  wire [3:0] c$nextStOut_case_alt_selection_3;
  wire [38:0] c$ds_case_alt_selection_8;
  wire [3:0] c$nextStOut_case_alt_selection_8;
  wire [63:0] c$nextStOut_case_alt_sel_alt_f_1;
  wire [63:0] result_sel_alt_f_10;
  wire [3:0] c$nextStOut_case_alt_selection_13;
  wire [63:0] c$nextStOut_case_alt_sel_alt_f_3;
  wire [3:0] \c$left'_case_alt_selection_1 ;

  assign result = {result_9[71:71],
                   {result_4[69:0],   bFwd_1[78:2]}};

  // map begin
  genvar i;
  generate
  for (i=0; i < 2; i = i + 1) begin : map
    wire [74:0] map_in;
    assign map_in = bFwd[i*75+:75];
    wire [74:0] map_out;
    assign map_out = map_in;


    assign c$scrut_case_alt[i*75+:75] = map_out;
  end
  endgenerate
  // map end

  assign bFwd = result_2[149:0];

  assign c$ds1_app_arg = ack ? ({2 {1'b0}}) : acked1;

  // map begin
  genvar i_0;
  generate
  for (i_0=0; i_0 < 2; i_0 = i_0 + 1) begin : map_0
    wire  map_in_0;
    assign map_in_0 = acked[i_0*1+:1];
    wire  map_out_0;
    assign map_out_0 = ~ map_in_0;


    assign c$ds1_app_arg_0[i_0*1+:1] = map_out_0;
  end
  endgenerate
  // map end

  // map begin
  genvar i_1;
  generate
  for (i_1=0; i_1 < 2; i_1 = i_1 + 1) begin : map_1
    wire  map_in_1;
    assign map_in_1 = c$ds1_app_arg_0[i_1*1+:1];
    wire [74:0] map_out_1;
    wire [74:0] result_20;
    assign map_out_1 = result_20;

    assign result_20 = map_in_1 ? wild2 : {1'b0,74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};


    assign c$ds1_app_arg_1[i_1*75+:75] = map_out_1;
  end
  endgenerate
  // map end

  assign result_0 = wild2[74:74] ? {c$ds1_app_arg,
                                    {ack,   c$ds1_app_arg_1}} : {acked,   {1'b0,
                                                                           {2 {{1'b0,74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}}}};

  assign bwd1 = result_0[150:150];

  assign b = ~ (c$ds8_bindCsr_0);

  assign result_1 = b ? {1'b0,
                         {1'b0,74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {bwd1,
                                                                                                                   a5};

  assign result_2 = {result_1[75:75],
                     result_0[149:0]};

  // register begin
  always @(posedge c$ds8_bindCsr or  negedge  c$ds8_bindCsr_0) begin : acked_register
    if ( ! c$ds8_bindCsr_0) begin
      acked <= {1'b0,   1'b0};
    end else begin
      acked <= result_0[152:151];
    end
  end
  // register end

  assign wild2 = result_1[74:0];

  assign c$vec2 = (c$ds6_app_arg);

  // zipWith start
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) begin : zipWith
    wire  zipWith_in1;
    assign zipWith_in1 = acked[i_2*1+:1];
    wire  zipWith_in2;
    assign zipWith_in2 = c$vec2[i_2*1+:1];
    wire  c$n;
    assign c$n = zipWith_in1 | zipWith_in2;


    assign acked1[i_2*1+:1] = c$n;
  end
  endgenerate
  // zipWith end

  wire [1:0] vec;
  wire  acc_1_0;
  wire  acc_1;
  wire  acc_2;
  assign ack = acc_1_0;

  assign vec = acked1;

  assign acc_1 = vec[1:1];

  assign acc_2 = vec[0:0];

  assign acc_1_0 = acc_1 & acc_2;





  assign c$vec = {result_8[115:115],   aBwd_0};

  // map begin
  genvar i_3;
  generate
  for (i_3=0; i_3 < 2; i_3 = i_3 + 1) begin : map_2
    wire  map_in_2;
    assign map_in_2 = c$vec[i_3*1+:1];
    wire  map_out_2;
    assign map_out_2 = map_in_2;


    assign c$ds6_app_arg[i_3*1+:1] = map_out_2;
  end
  endgenerate
  // map end

  assign a5 = bFwd_0[74:0];

  assign a4 = bFwd_0[141:75];

  assign bFwd_0 = result_3[141:0];

  assign result_fun_arg = {result_9[70:0],
                           result_2[150:150]};

  Blink_topEntity_recordProcessorC Blink_topEntity_recordProcessorC_result_3
    ( .result (result_3)
    , .c$ds1_bindCsr (c$ds8_bindCsr)
    , .c$ds1_bindCsr_0 (c$ds8_bindCsr_0)
    , .eta (result_fun_arg) );

  assign a6 = aBwd[0:0];

  assign a5_0 = aBwd[1:1];

  assign aBwd = result_4[71:70];

  assign result_fun_arg_0 = {{a4,
                              c$case_alt_3[35:0],   bFwd_1[114:79]},
                             bBwd[36:36]};

  Blink_topEntity_recordBuilderC Blink_topEntity_recordBuilderC_result_4
    ( .result (result_4)
    , .c$ds3_bindCsr (c$ds8_bindCsr)
    , .c$ds3_bindCsr_0 (c$ds8_bindCsr_0)
    , .ds (result_fun_arg_0) );

  // replaceBit start
  always @(*) begin
    c$errorReg_case_alt = (errorReg << (64'sd1));
    c$errorReg_case_alt[(64'sd0)] = b_0;
  end
  // replaceBit end

  assign c$errorReg_app_arg = errBit[1:1] ? c$errorReg_case_alt : errorReg;

  assign result_5 = (c$app_arg_0 & (a5_0 & (~ c$app_arg))) ? (packetCounter + 64'b0000000000000000000000000000000000000000000000000000000000000001) : packetCounter;

  assign c$app_arg = iFwd[74:74] ? a1[0:0] : 1'b0;

  assign c$app_arg_0 = iFwd[74:74] ? a1[1:1] : 1'b0;

  assign a1 = iFwd[73:0];

  assign c$vec_1 = {errorReg,
                    64'b0000000000000000000000000000000000000000000000000000000000000000,
                    packetCounter};

  // map begin
  genvar i_5;
  generate
  for (i_5=0; i_5 < 3; i_5 = i_5 + 1) begin : map_4
    wire [63:0] map_in_4;
    assign map_in_4 = c$vec_1[i_5*64+:64];
    wire [63:0] map_out_4;
    wire [63:0] c$bb_res_res;
    wire [63:0] c$vec_0;
    assign c$vec_0 = ((map_in_4));

    // map begin
    genvar i_4;

    for (i_4=0; i_4 < 2; i_4 = i_4 + 1) begin : map_3
      wire [31:0] map_in_3;
      assign map_in_3 = c$vec_0[i_4*32+:32];
      wire [31:0] map_out_3;
      assign map_out_3 = map_in_3;


      assign c$bb_res_res[i_4*32+:32] = map_out_3;
    end

    // map end

    assign map_out_4 = c$bb_res_res;


    assign c$ds1_app_arg_2[i_5*64+:64] = map_out_4;
  end
  endgenerate
  // map end

  assign c$bv = (iFwd[73:42] >> (64'sd2));

  assign c$vecFlat = (c$ds1_app_arg_2);

  // index begin
  wire [31:0] vecArray [0:6-1];
  genvar i_6;
  generate
  for (i_6=0; i_6 < 6; i_6=i_6+1) begin : mk_array
    assign vecArray[(6-1)-i_6] = c$vecFlat[i_6*32+:32];
  end
  endgenerate
  assign c$app_arg_app_arg = vecArray[($unsigned({{(64-32) {1'b0}},c$bv}))];
  // index end

  assign c$case_alt_selection_2 = iFwd[41:9];

  assign c$case_alt = c$case_alt_selection_2[32:32] ? {1'b1,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {1'b1,{1'b1,c$app_arg_app_arg}};

  assign c$case_alt_0 = iFwd[0:0] ? {1'b0,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$case_alt;

  assign c$case_alt_1 = iFwd[3:3] ? c$case_alt_0 : {1'b0,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign result_6 = iFwd[74:74] ? c$case_alt_1 : {1'b0,33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$case_alt_2 = iFwd[74:74] ? {1'b1,{a1_0,
                                             a2[2:2],
                                             a2[1:1]}} : {1'b0,35'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign a1_0 = result_6[32:0];

  assign a2 = iFwd[73:0];

  assign result_7 = result_6[33:33] ? c$case_alt_2 : {1'b0,35'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$case_alt_3 = {a5_0,   result_7};

  assign c$vec_2 = (c$scrut_case_alt[75-1 : 0]);

  assign iFwd = c$vec_2[75-1 -: 75];

  assign errBit = bFwd_1[1:0];

  // register begin
  always @(posedge c$ds8_bindCsr or  negedge  c$ds8_bindCsr_0) begin : errorReg_register
    if ( ! c$ds8_bindCsr_0) begin
      errorReg <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end else begin
      errorReg <= c$errorReg_app_arg;
    end
  end
  // register end

  // register begin
  always @(posedge c$ds8_bindCsr or  negedge  c$ds8_bindCsr_0) begin : packetCounter_register
    if ( ! c$ds8_bindCsr_0) begin
      packetCounter <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end else begin
      packetCounter <= result_5;
    end
  end
  // register end

  assign b_0 = errBit[0:0];

  assign bFwd_1 = result_8[114:0];

  assign result_fun_arg_1 = {c$scrut_case_alt[150-1 -: 75],
                             {a6,   bBwd[35:0]}};

  Blink_topEntity_wishboneMasterC Blink_topEntity_wishboneMasterC_result_8
    ( .result (result_8)
    , .c$ds5_bindCsr (c$ds8_bindCsr)
    , .c$ds5_bindCsr_0 (c$ds8_bindCsr_0)
    , .x (result_fun_arg_1) );

  assign aBwd_0 = c$case_alt_3[36:36];

  assign bBwd = eta2[36:0];

  assign result_9 = {result_10[39:39],
                     result_13[70:0]};

  assign result_10 = (ds1_0 == 10'd0) ? c$ds_case_alt : c$ds_case_alt_0;

  assign c$ds_case_alt = aFwd[69:69] ? {c$ds_app_arg,
                                        {result_13[71:71],   {1'b1,{_data,
                                                                    ps[36:33],   1'b0,   _abort}}}} : {10'd0,
                                                                                                       {1'b1,
                                                                                                        {1'b0,38'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign c$ds_app_arg = result_13[71:71] ? (result_12 + result_11) : 10'd0;

  assign result_11 = (rCount > 10'd0) ? (rCount + 10'd1) : 10'd0;

  assign rCount = (({2'b00,c$rCount_app_arg}));

  assign c$rCount_app_arg = _data[7:0];

  assign result_12 = (wCount > 10'd0) ? (wCount + 10'd1) : 10'd0;

  assign wCount = (({2'b00,c$wCount_app_arg}));

  assign c$wCount_app_arg = _data[15:8];

  assign c$ds_case_alt_0 = aFwd[69:69] ? {c$ds_app_arg_2,
                                          {result_13[71:71],   {1'b1,{_data,
                                                                      c$ds_app_arg_1,   c$ds_app_arg_0,
                                                                      _abort}}}} : {ds1_0,   {1'b1,
                                                                                              {1'b0,38'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign _abort = ps[0:0];

  assign _data = ps[68:37];

  assign c$ds_app_arg_selection_3 = ps[36:33];

  assign c$ds_app_arg_0 = c$ds_app_arg_selection_3[3:3] ? 1'b1 : 1'b0;

  assign c$ds_app_arg_1 = (\c$left'_case_alt  == 10'd0) ? {1'b1,3'd4} : {1'b0,3'bxxx};

  assign c$ds_app_arg_2 = result_13[71:71] ? \c$left'_case_alt  : ds1_0;

  assign result_13 = {result_18[39:39],
                      result_14[70:0]};

  // map begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 4; i_7 = i_7 + 1) begin : map_5
    wire [7:0] map_in_5;
    assign map_in_5 = header1[i_7*8+:8];
    wire [7:0] map_out_5;
    assign map_out_5 = map_in_5;


    assign c$hdr_app_arg_app_arg[i_7*8+:8] = map_out_5;
  end
  endgenerate
  // map end

  assign header1_projection = ds1[32:1];

  assign header1 = header1_projection;

  // register begin
  always @(posedge c$ds8_bindCsr or  negedge  c$ds8_bindCsr_0) begin : ds1_register
    if ( ! c$ds8_bindCsr_0) begin
      ds1 <= {1'b0,1'b0,{8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx,   8'bxxxxxxxx},1'bx};
    end else begin
      ds1 <= result_14[106:72];
    end
  end
  // register end

  assign result_14 = ds1[34:34] ? c$ds_case_alt_1 : c$ds_case_alt_3;

  assign c$ds_case_alt_selection_3 = result_18[38:0];

  assign c$ds_case_alt_1 = c$ds_case_alt_selection_3[38:38] ? {nextStOut,
                                                               {c$ds_app_arg_4,   {1'b1,{result_18[37:6],
                                                                                         c$ds_app_arg_3,
                                                                                         {result_18[1:1],   result_16},
                                                                                         nextAborted}}}} : {ds1,
                                                                                                            {r2sAc,
                                                                                                             {1'b0,70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign c$ds1_case_alt = front;

  assign c$ds2_case_alt = front_0;

  assign c$ds3_case_alt = back;

  assign c$ds4_case_alt = back_0;

  assign c$ds5_case_alt = back_1;

  assign c$ds6_case_alt = front_1;

  assign c$ds7_case_alt = back_2;

  assign c$ds8_case_alt = back_3;

  assign c$ds9_case_alt = back_4;

  assign result_15 = {front_2 == 1'b1,
                      back_5 == 1'b1,   front_3 == 1'b1,   front_4,
                      back_6 == 1'b1,   front_5 == 1'b1,
                      front_6 == 1'b1,   back_7,
                      c$ds8_case_alt[23:16],   front_7,   back_8};

  assign ds = ((c$hdr_app_arg_app_arg));

  assign front = ds[31:27];

  assign front_0 = c$ds1_case_alt[4:3];

  assign back = c$ds1_case_alt[2:0];

  assign back_0 = c$ds3_case_alt[1:0];

  assign back_1 = ds[26:0];

  assign front_1 = c$ds5_case_alt[26:24];

  assign back_2 = c$ds6_case_alt[1:0];

  assign back_3 = c$ds5_case_alt[23:0];

  assign back_4 = c$ds8_case_alt[15:0];

  assign front_2 = c$ds2_case_alt[1:1];

  assign back_5 = c$ds2_case_alt[0:0];

  assign front_3 = c$ds3_case_alt[2:2];

  assign front_4 = c$ds4_case_alt[1:1];

  assign back_6 = c$ds4_case_alt[0:0];

  assign front_5 = c$ds6_case_alt[2:2];

  assign front_6 = c$ds7_case_alt[1:1];

  assign back_7 = c$ds7_case_alt[0:0];

  assign front_7 = c$ds9_case_alt[15:8];

  assign back_8 = c$ds9_case_alt[7:0];

  assign result_16 = result_15;

  assign c$ds_app_arg_3 = ds1[0:0] ? {1'b1,3'd0} : result_18[5:2];

  assign c$ds_app_arg_4 = nextStOut[34:34] ? c$ds_case_alt_2 : r2sAc;

  assign c$ds_case_alt_2 = nextStOut[0:0] ? 1'b0 : r2sAc;

  assign nextStOut = r2sAc ? c$nextStOut_case_alt : ds1;

  assign c$nextStOut_case_alt_selection_3 = result_18[5:2];

  assign c$nextStOut_case_alt = c$nextStOut_case_alt_selection_3[3:3] ? {1'b0,1'b0,{4 {8'bxxxxxxxx}},1'bx} : {1'b1,nextAborted,header1,1'b0};

  assign nextAborted = ds1[33:33] | result_18[0:0];

  assign c$ds_case_alt_selection_8 = result_18[38:0];

  assign c$ds_case_alt_3 = c$ds_case_alt_selection_8[38:38] ? {nextStOut_0,
                                                               {c$ds_app_arg_5,
                                                                {1'b0,70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}} : {ds1,
                                                                                                                                                       {r2sAc,
                                                                                                                                                        {1'b0,70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}};

  assign c$ds_app_arg_5 = nextStOut_0[34:34] ? c$ds_case_alt_4 : 1'b1;

  assign c$ds_case_alt_4 = nextStOut_0[0:0] ? 1'b0 : 1'b1;

  assign nextStOut_0 = (1'b1) ? c$nextStOut_case_alt_0 : c$nextStOut_case_alt_1;

  assign c$nextStOut_case_alt_selection_8 = result_18[5:2];

  assign c$nextStOut_case_alt_sel_alt_f_1 = ({ds1[32:1],result_18[37:6]});

  assign c$nextStOut_case_alt_0 = c$nextStOut_case_alt_selection_8[3:3] ? result_17 : {1'b1,c$nextStOut_app_arg_0,c$nextStOut_case_alt_sel_alt_f_1[31:0],1'b0};

  assign result_sel_alt_f_10 = ({ds1[32:1],result_18[37:6]});

  assign result_17 = (idx != 3'd4) ? {1'b0,1'b0,{4 {8'bxxxxxxxx}},1'bx} : {1'b1,c$nextStOut_app_arg_0,result_sel_alt_f_10[31:0],1'b1};

  assign idx = result_18[4:2];

  assign c$nextStOut_case_alt_selection_13 = result_18[5:2];

  assign c$nextStOut_case_alt_sel_alt_f_3 = ({ds1[32:1],result_18[37:6]});

  assign c$nextStOut_case_alt_1 = c$nextStOut_case_alt_selection_13[3:3] ? {1'b0,1'b0,{4 {8'bxxxxxxxx}},1'bx} : {1'b0,c$nextStOut_app_arg_0,c$nextStOut_case_alt_sel_alt_f_3[31:0],1'bx};

  assign c$nextStOut_app_arg_0 = ds1[33:33] | result_18[0:0];

  assign bwd1_0 = result_14[71:71];

  assign b_1 = ~ (c$ds8_bindCsr_0);

  assign result_18 = b_1 ? {1'b0,
                            {1'b0,38'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {bwd1_0,
                                                                                  s2rAc};

  assign s2rAc = result_10[38:0];

  assign r2sAc = result_3[142:142];

  assign \c$left'_case_alt_selection_1  = ps[36:33];

  assign \c$left'_case_alt  = \c$left'_case_alt_selection_1 [3:3] ? 10'd0 : (ds1_0 - 10'd1);

  assign ps = aFwd[68:0];

  // register begin
  always @(posedge c$ds8_bindCsr or  negedge  c$ds8_bindCsr_0) begin : ds1_0_register
    if ( ! c$ds8_bindCsr_0) begin
      ds1_0 <= 10'd0;
    end else begin
      ds1_0 <= result_10[49:40];
    end
  end
  // register end

  assign aFwd = eta2[106:37];


endmodule

